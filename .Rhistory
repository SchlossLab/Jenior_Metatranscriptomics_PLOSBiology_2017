rm(metadata_shared_otu, shared_otu)
# Filter OTUs and transform
cef_shared_otu <- filter_table(cef_shared_otu)
cef_shared_otu[,2:ncol(cef_shared_otu)] <- log10(cef_shared_otu[,2:ncol(cef_shared_otu)] + 1)
strep_shared_otu <- filter_table(strep_shared_otu)
strep_shared_otu[,2:ncol(strep_shared_otu)] <- log10(strep_shared_otu[,2:ncol(strep_shared_otu)] + 1)
clinda_shared_otu <- filter_table(clinda_shared_otu)
clinda_shared_otu[,2:ncol(clinda_shared_otu)] <- log10(clinda_shared_otu[,2:ncol(clinda_shared_otu)] + 1)
# Filter for significant OTUs by Wilcoxon
cef_infected_otu <- subset(cef_shared_otu, infection == '630')
cef_infected_otu$infection <- NULL
cef_mock_otu <- subset(cef_shared_otu, infection == 'mock')
cef_mock_otu$infection <- NULL
cef_pvalues <- c()
index2 <- 1
for (index in colnames(cef_infected_otu)){
if (wilcox.test(cef_mock_otu[,index], cef_infected_otu[,index], exact=FALSE)$p.value > 0.05){
cef_infected_otu <- cef_infected_otu[, !(names(cef_infected_otu) == index)]
cef_mock_otu <- cef_mock_otu[, !(names(cef_mock_otu) == index)]
next
}
else if (median(cef_mock_otu[,index]) == median(cef_infected_otu[,index])){
cef_infected_otu <- cef_infected_otu[, !(names(cef_infected_otu) == index)]
cef_mock_otu <- cef_mock_otu[, !(names(cef_mock_otu) == index)]
next
}
else {
cef_pvalues[index2] <- wilcox.test(cef_mock_otu[,index], cef_infected_otu[,index], exact=FALSE)$p.value
index2 <- index2 + 1
}
}
cef_pvalues <- round(p.adjust(cef_pvalues, method='BH'), 3)
cef_final_p <- c()
cef_sig <- c()
for (index in 1:length(cef_pvalues)){
if (cef_pvalues[index] > 0.05){
cef_infected_otu[,index] <- NULL
cef_mock_otu[,index] <- NULL
}
else {
cef_final_p <- c(cef_final_p, cef_pvalues[index])
if (cef_pvalues[index] <= 0.001) {
cef_sig <- c(cef_sig, '***')
}
else if (cef_pvalues[index] <= 0.01) {
cef_sig <- c(cef_sig, '**')
}
else {
cef_sig <- c(cef_sig, '*')
}
}
}
cef_final_p <- as.character(cef_final_p)
clinda_infected_otu <- subset(clinda_shared_otu, infection == '630')
clinda_infected_otu$infection <- NULL
clinda_mock_otu <- subset(clinda_shared_otu, infection == 'mock')
clinda_mock_otu$infection <- NULL
clinda_pvalues <- c()
index2 <- 1
for (index in colnames(clinda_infected_otu)){
if (wilcox.test(clinda_mock_otu[,index], clinda_infected_otu[,index], exact=FALSE)$p.value > 0.05){
clinda_infected_otu <- clinda_infected_otu[, !(names(clinda_infected_otu) == index)]
clinda_mock_otu <- clinda_mock_otu[, !(names(clinda_mock_otu) == index)]
next
}
else if (median(clinda_mock_otu[,index]) == median(clinda_infected_otu[,index])){
clinda_infected_otu <- clinda_infected_otu[, !(names(clinda_infected_otu) == index)]
clinda_mock_otu <- clinda_mock_otu[, !(names(clinda_mock_otu) == index)]
next
}
else {
clinda_pvalues[index2] <- wilcox.test(clinda_mock_otu[,index], clinda_infected_otu[,index], exact=FALSE)$p.value
index2 <- index2 + 1
}
}
clinda_pvalues <- round(p.adjust(clinda_pvalues, method='BH'), 3)
clinda_final_p <- c()
clinda_sig <- c()
for (index in 1:length(clinda_pvalues)){
if (cef_pvalues[index] > 0.05){
clinda_infected_otu[,index] <- NULL
clinda_mock_otu[,index] <- NULL
}
else {
clinda_final_p <- c(clinda_final_p, clinda_pvalues[index])
if (clinda_pvalues[index] <= 0.001) {
clinda_sig <- c(clinda_sig, '***')
}
else if (clinda_pvalues[index] <= 0.01) {
clinda_sig <- c(clinda_sig, '**')
}
else {
clinda_sig <- c(clinda_sig, '*')
}
}
}
clinda_final_p <- as.character(clinda_final_p)
strep_infected_otu <- subset(strep_shared_otu, infection == '630')
strep_infected_otu$infection <- NULL
strep_mock_otu <- subset(strep_shared_otu, infection == 'mock')
strep_mock_otu$infection <- NULL
strep_pvalues <- c()
index2 <- 1
for (index in colnames(strep_infected_otu)){
if (wilcox.test(strep_mock_otu[,index], strep_infected_otu[,index], exact=FALSE)$p.value > 0.05){
strep_infected_otu <- strep_infected_otu[, !(names(strep_infected_otu) == index)]
strep_mock_otu <- strep_mock_otu[, !(names(strep_mock_otu) == index)]
next
}
else if (median(strep_mock_otu[,index]) == median(strep_infected_otu[,index])){
strep_infected_otu <- strep_infected_otu[, !(names(strep_infected_otu) == index)]
strep_mock_otu <- strep_mock_otu[, !(names(strep_mock_otu) == index)]
next
}
else {
strep_pvalues[index2] <- wilcox.test(strep_mock_otu[,index], strep_infected_otu[,index], exact=FALSE)$p.value
index2 <- index2 + 1
}
}
strep_pvalues <- round(p.adjust(strep_pvalues, method='BH'), 3)
strep_final_p <- c()
strep_sig <- c()
for (index in 1:length(strep_pvalues)){
if (strep_pvalues[index] > 0.05){
strep_infected_otu[,index] <- NULL
strep_mock_otu[,index] <- NULL
}
else {
strep_final_p <- c(strep_final_p, strep_pvalues[index])
if (strep_pvalues[index] <= 0.001) {
strep_sig <- c(strep_sig, '***')
}
else if (strep_pvalues[index] <= 0.01) {
strep_sig <- c(strep_sig, '**')
}
else {
strep_sig <- c(strep_sig, '*')
}
}
}
strep_final_p <- as.character(strep_final_p)
# Rename OTUs with species-level identifier
cef_infected_otu <- clean_merge(t(cef_infected_otu), otu_tax)
cef_genera <- as.vector(cef_infected_otu$genus)
cef_phyla <- as.vector(cef_infected_otu$phylum)
cef_otus <- as.vector(cef_infected_otu$OTU_short)
cef_infected_otu$genus <- NULL
cef_infected_otu$phylum <- NULL
cef_infected_otu$OTU_short <- NULL
cef_infected_otu <- as.data.frame(t(cef_infected_otu))
cef_mock_otu <- clean_merge(t(cef_mock_otu), otu_tax)
cef_mock_otu$genus <- NULL
cef_mock_otu$phylum <- NULL
cef_mock_otu$OTU_short <- NULL
cef_mock_otu <- as.data.frame(t(cef_mock_otu))
clinda_infected_otu <- clean_merge(t(clinda_infected_otu), otu_tax)
clinda_genera <- as.vector(clinda_infected_otu$genus)
clinda_phyla <- as.vector(clinda_infected_otu$phylum)
clinda_otus <- as.vector(clinda_infected_otu$OTU_short)
clinda_infected_otu$genus <- NULL
clinda_infected_otu$phylum <- NULL
clinda_infected_otu$OTU_short <- NULL
clinda_infected_otu <- as.data.frame(t(clinda_infected_otu))
clinda_mock_otu <- clean_merge(t(clinda_mock_otu), otu_tax)
clinda_mock_otu$genus <- NULL
clinda_mock_otu$phylum <- NULL
clinda_mock_otu$OTU_short <- NULL
clinda_mock_otu <- as.data.frame(t(clinda_mock_otu))
strep_infected_otu <- clean_merge(t(strep_infected_otu), otu_tax)
strep_genera <- as.vector(strep_infected_otu$genus)
strep_phyla <- as.vector(strep_infected_otu$phylum)
strep_otus <- as.vector(strep_infected_otu$OTU_short)
strep_infected_otu$genus <- NULL
strep_infected_otu$phylum <- NULL
strep_infected_otu$OTU_short <- NULL
strep_infected_otu <- as.data.frame(t(strep_infected_otu))
strep_mock_otu <- clean_merge(t(strep_mock_otu), otu_tax)
strep_mock_otu$genus <- NULL
strep_mock_otu$phylum <- NULL
strep_mock_otu$OTU_short <- NULL
strep_mock_otu <- as.data.frame(t(strep_mock_otu))
rm(otu_tax)
#--------------------------#
# Phylotype family-level shared file
# Convert to relative abundance
relabund_family <- (shared_family / rowSums(shared_family)) * 100
rm(shared_family)
# Bin lowly abundant OTUs into an 'Other' category
relabund_family[relabund_family < 1] <- 0
relabund_family <- relabund_family[, colSums(relabund_family != 0) > 0]
top_otus <- colnames(relabund_family)
# Subset family-level taxonomy
taxonomy_family <- subset(taxonomy_family, taxonomy_family$OTU %in% top_otus)
taxonomy_family$Taxonomy <- gsub('_', ' ', taxonomy_family$Taxonomy)
taxonomy_family <- taxonomy_family[order(taxonomy_family$Taxonomy),]
rm(top_otus)
# Start with clear environment
rm(list=ls())
gc()
# Load in functions
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Start with clear environment
rm(list=ls())
gc()
# Load in functions
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Define input files
shared_otu_file <- 'data/16S_analysis/all_treatments.0.03.unique_list.conventional.shared'
otu_tax_file <- 'data/16S_analysis/formatted.all_treatments.0.03.cons.taxonomy'
shared_family_file <- 'data/16S_analysis/all_treatments.family.subsample.shared'
taxonomy_family_file <- 'data/16S_analysis/all_treatments.family.cons.format.taxonomy'
wetlab_file <- 'data/wetlab_assays.tsv'
metadata_file <- 'data/metadata.tsv'
# Define output files
plot_file <- 'results/figures/figure_1.pdf'
metadata <- read.delim(metadata_file, sep='\t', header=T, row.names=1)
metadata <- metadata[!rownames(metadata) %in% c('CefC5M2'), ] # Remove contaminated sample
metadata <- subset(metadata, type == 'conventional') # remove germfree
metadata$type <- NULL
metadata$cage <- NULL
metadata$mouse <- NULL
metadata$gender <- NULL
shared_otu <- read.delim(shared_otu_file, sep='\t', header=T, row.names=2)
shared_otu <- shared_otu[!rownames(shared_otu) %in% c('CefC5M2'), ]  # Remove contaminated sample
shared_otu <- shared_otu[,!(names(shared_otu) %in% c('Otu0004','Otu0308'))] # Remove residual C. difficile OTUs
shared_otu$numOtus <- NULL
shared_otu$label <- NULL
taxonomy_family <- read.delim(taxonomy_family_file, sep='\t', header=T)
taxonomy_family$Size <- NULL
shared_family <- read.delim(shared_family_file, sep='\t', header=T, row.names=2)
shared_family <- shared_family[!rownames(shared_family) %in% c('CefC5M2'), ]  # Remove contaminated sample
shared_family <- shared_family[ , !(names(shared_family) == 'Otu008')] # Remove residual C. difficile OTU
shared_family$numOtus <- NULL
shared_family$label <- NULL
wetlab <- read.delim(wetlab_file, sep='\t', header=T, row.names=1)
otu_tax <- read.delim(otu_tax_file, sep='\t', header=T, row.names=1)
rm(shared_family_file, taxonomy_family_file, metadata_file, wetlab_file, otu_tax_file)
#-------------------------------------------------------------------------------------------------------------------------------------#
# Format data
# OTU shared file
shared_otu <- rrarefy(shared_otu, ceiling(min(rowSums(shared_otu)) * 0.9))
metadata_shared_otu <- clean_merge(metadata, shared_otu)
cef_shared_otu <- subset(metadata_shared_otu, abx == 'cefoperazone')
cef_shared_otu$abx <- NULL
metadata_shared_otu <- clean_merge(metadata, shared_otu)
clean_merge <- function(data_1, data_2){
clean_merged <- merge(data_1, data_2, by='row.names', all.y=TRUE)
rownames(clean_merged) <- clean_merged$Row.names
clean_merged$Row.names <- NULL
return(clean_merged)
}
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Start with clear environment
rm(list=ls())
gc()
# Load in functions
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Define input files
shared_otu_file <- 'data/16S_analysis/all_treatments.0.03.unique_list.conventional.shared'
otu_tax_file <- 'data/16S_analysis/formatted.all_treatments.0.03.cons.taxonomy'
shared_family_file <- 'data/16S_analysis/all_treatments.family.subsample.shared'
taxonomy_family_file <- 'data/16S_analysis/all_treatments.family.cons.format.taxonomy'
wetlab_file <- 'data/wetlab_assays.tsv'
metadata_file <- 'data/metadata.tsv'
# Define output files
plot_file <- 'results/figures/figure_1.pdf'
#-------------------------------------------------------------------------------------------------------------------------------------#
# Load in data
metadata <- read.delim(metadata_file, sep='\t', header=T, row.names=1)
metadata <- metadata[!rownames(metadata) %in% c('CefC5M2'), ] # Remove contaminated sample
metadata <- subset(metadata, type == 'conventional') # remove germfree
metadata$type <- NULL
metadata$cage <- NULL
metadata$mouse <- NULL
metadata$gender <- NULL
shared_otu <- read.delim(shared_otu_file, sep='\t', header=T, row.names=2)
shared_otu <- shared_otu[!rownames(shared_otu) %in% c('CefC5M2'), ]  # Remove contaminated sample
shared_otu <- shared_otu[,!(names(shared_otu) %in% c('Otu0004','Otu0308'))] # Remove residual C. difficile OTUs
shared_otu$numOtus <- NULL
shared_otu$label <- NULL
taxonomy_family <- read.delim(taxonomy_family_file, sep='\t', header=T)
taxonomy_family$Size <- NULL
shared_family <- read.delim(shared_family_file, sep='\t', header=T, row.names=2)
shared_family <- shared_family[!rownames(shared_family) %in% c('CefC5M2'), ]  # Remove contaminated sample
shared_family <- shared_family[ , !(names(shared_family) == 'Otu008')] # Remove residual C. difficile OTU
shared_family$numOtus <- NULL
shared_family$label <- NULL
wetlab <- read.delim(wetlab_file, sep='\t', header=T, row.names=1)
otu_tax <- read.delim(otu_tax_file, sep='\t', header=T, row.names=1)
rm(shared_family_file, taxonomy_family_file, metadata_file, wetlab_file, otu_tax_file)
#-------------------------------------------------------------------------------------------------------------------------------------#
# Format data
# OTU shared file
shared_otu <- rrarefy(shared_otu, ceiling(min(rowSums(shared_otu)) * 0.9))
metadata_shared_otu <- clean_merge(metadata, shared_otu)
cef_shared_otu <- subset(metadata_shared_otu, abx == 'cefoperazone')
cef_shared_otu$abx <- NULL
cef_shared_otu$susceptibility <- NULL
strep_shared_otu <- subset(metadata_shared_otu, abx == 'streptomycin')
strep_shared_otu$abx <- NULL
strep_shared_otu$susceptibility <- NULL
clinda_shared_otu <- subset(metadata_shared_otu, abx == 'clindamycin')
clinda_shared_otu$abx <- NULL
clinda_shared_otu$susceptibility <- NULL
rm(metadata_shared_otu, shared_otu)
# Filter OTUs and transform
cef_shared_otu <- filter_table(cef_shared_otu)
cef_shared_otu[,2:ncol(cef_shared_otu)] <- log10(cef_shared_otu[,2:ncol(cef_shared_otu)] + 1)
strep_shared_otu <- filter_table(strep_shared_otu)
strep_shared_otu[,2:ncol(strep_shared_otu)] <- log10(strep_shared_otu[,2:ncol(strep_shared_otu)] + 1)
clinda_shared_otu <- filter_table(clinda_shared_otu)
clinda_shared_otu[,2:ncol(clinda_shared_otu)] <- log10(clinda_shared_otu[,2:ncol(clinda_shared_otu)] + 1)
# Filter for significant OTUs by Wilcoxon
cef_infected_otu <- subset(cef_shared_otu, infection == '630')
cef_infected_otu$infection <- NULL
cef_mock_otu <- subset(cef_shared_otu, infection == 'mock')
cef_mock_otu$infection <- NULL
cef_pvalues <- c()
index2 <- 1
for (index in colnames(cef_infected_otu)){
if (wilcox.test(cef_mock_otu[,index], cef_infected_otu[,index], exact=FALSE)$p.value > 0.05){
cef_infected_otu <- cef_infected_otu[, !(names(cef_infected_otu) == index)]
cef_mock_otu <- cef_mock_otu[, !(names(cef_mock_otu) == index)]
next
}
else if (median(cef_mock_otu[,index]) == median(cef_infected_otu[,index])){
cef_infected_otu <- cef_infected_otu[, !(names(cef_infected_otu) == index)]
cef_mock_otu <- cef_mock_otu[, !(names(cef_mock_otu) == index)]
next
}
else {
cef_pvalues[index2] <- wilcox.test(cef_mock_otu[,index], cef_infected_otu[,index], exact=FALSE)$p.value
index2 <- index2 + 1
}
}
cef_pvalues <- round(p.adjust(cef_pvalues, method='BH'), 3)
cef_final_p <- c()
cef_sig <- c()
for (index in 1:length(cef_pvalues)){
if (cef_pvalues[index] > 0.05){
cef_infected_otu[,index] <- NULL
cef_mock_otu[,index] <- NULL
}
else {
cef_final_p <- c(cef_final_p, cef_pvalues[index])
if (cef_pvalues[index] <= 0.001) {
cef_sig <- c(cef_sig, '***')
}
else if (cef_pvalues[index] <= 0.01) {
cef_sig <- c(cef_sig, '**')
}
else {
cef_sig <- c(cef_sig, '*')
}
}
}
cef_final_p <- as.character(cef_final_p)
clinda_infected_otu <- subset(clinda_shared_otu, infection == '630')
clinda_infected_otu$infection <- NULL
clinda_mock_otu <- subset(clinda_shared_otu, infection == 'mock')
clinda_mock_otu$infection <- NULL
clinda_pvalues <- c()
index2 <- 1
for (index in colnames(clinda_infected_otu)){
if (wilcox.test(clinda_mock_otu[,index], clinda_infected_otu[,index], exact=FALSE)$p.value > 0.05){
clinda_infected_otu <- clinda_infected_otu[, !(names(clinda_infected_otu) == index)]
clinda_mock_otu <- clinda_mock_otu[, !(names(clinda_mock_otu) == index)]
next
}
else if (median(clinda_mock_otu[,index]) == median(clinda_infected_otu[,index])){
clinda_infected_otu <- clinda_infected_otu[, !(names(clinda_infected_otu) == index)]
clinda_mock_otu <- clinda_mock_otu[, !(names(clinda_mock_otu) == index)]
next
}
else {
clinda_pvalues[index2] <- wilcox.test(clinda_mock_otu[,index], clinda_infected_otu[,index], exact=FALSE)$p.value
index2 <- index2 + 1
}
}
clinda_pvalues <- round(p.adjust(clinda_pvalues, method='BH'), 3)
clinda_final_p <- c()
clinda_sig <- c()
for (index in 1:length(clinda_pvalues)){
if (cef_pvalues[index] > 0.05){
clinda_infected_otu[,index] <- NULL
clinda_mock_otu[,index] <- NULL
}
else {
clinda_final_p <- c(clinda_final_p, clinda_pvalues[index])
if (clinda_pvalues[index] <= 0.001) {
clinda_sig <- c(clinda_sig, '***')
}
else if (clinda_pvalues[index] <= 0.01) {
clinda_sig <- c(clinda_sig, '**')
}
else {
clinda_sig <- c(clinda_sig, '*')
}
}
}
clinda_final_p <- as.character(clinda_final_p)
strep_infected_otu <- subset(strep_shared_otu, infection == '630')
strep_infected_otu$infection <- NULL
strep_mock_otu <- subset(strep_shared_otu, infection == 'mock')
strep_mock_otu$infection <- NULL
strep_pvalues <- c()
index2 <- 1
for (index in colnames(strep_infected_otu)){
if (wilcox.test(strep_mock_otu[,index], strep_infected_otu[,index], exact=FALSE)$p.value > 0.05){
strep_infected_otu <- strep_infected_otu[, !(names(strep_infected_otu) == index)]
strep_mock_otu <- strep_mock_otu[, !(names(strep_mock_otu) == index)]
next
}
else if (median(strep_mock_otu[,index]) == median(strep_infected_otu[,index])){
strep_infected_otu <- strep_infected_otu[, !(names(strep_infected_otu) == index)]
strep_mock_otu <- strep_mock_otu[, !(names(strep_mock_otu) == index)]
next
}
else {
strep_pvalues[index2] <- wilcox.test(strep_mock_otu[,index], strep_infected_otu[,index], exact=FALSE)$p.value
index2 <- index2 + 1
}
}
strep_pvalues <- round(p.adjust(strep_pvalues, method='BH'), 3)
strep_final_p <- c()
strep_sig <- c()
for (index in 1:length(strep_pvalues)){
if (strep_pvalues[index] > 0.05){
strep_infected_otu[,index] <- NULL
strep_mock_otu[,index] <- NULL
}
else {
strep_final_p <- c(strep_final_p, strep_pvalues[index])
if (strep_pvalues[index] <= 0.001) {
strep_sig <- c(strep_sig, '***')
}
else if (strep_pvalues[index] <= 0.01) {
strep_sig <- c(strep_sig, '**')
}
else {
strep_sig <- c(strep_sig, '*')
}
}
}
strep_final_p <- as.character(strep_final_p)
# Rename OTUs with species-level identifier
cef_infected_otu <- clean_merge(t(cef_infected_otu), otu_tax)
cef_genera <- as.vector(cef_infected_otu$genus)
cef_phyla <- as.vector(cef_infected_otu$phylum)
cef_otus <- as.vector(cef_infected_otu$OTU_short)
cef_infected_otu$genus <- NULL
cef_infected_otu$phylum <- NULL
cef_infected_otu$OTU_short <- NULL
cef_infected_otu <- as.data.frame(t(cef_infected_otu))
cef_mock_otu <- clean_merge(t(cef_mock_otu), otu_tax)
cef_mock_otu$genus <- NULL
cef_mock_otu$phylum <- NULL
cef_mock_otu$OTU_short <- NULL
cef_mock_otu <- as.data.frame(t(cef_mock_otu))
clinda_infected_otu <- clean_merge(t(clinda_infected_otu), otu_tax)
clinda_genera <- as.vector(clinda_infected_otu$genus)
clinda_phyla <- as.vector(clinda_infected_otu$phylum)
clinda_otus <- as.vector(clinda_infected_otu$OTU_short)
clinda_infected_otu$genus <- NULL
clinda_infected_otu$phylum <- NULL
clinda_infected_otu$OTU_short <- NULL
clinda_infected_otu <- as.data.frame(t(clinda_infected_otu))
clinda_mock_otu <- clean_merge(t(clinda_mock_otu), otu_tax)
clinda_mock_otu$genus <- NULL
clinda_mock_otu$phylum <- NULL
clinda_mock_otu$OTU_short <- NULL
clinda_mock_otu <- as.data.frame(t(clinda_mock_otu))
strep_infected_otu <- clean_merge(t(strep_infected_otu), otu_tax)
strep_genera <- as.vector(strep_infected_otu$genus)
strep_phyla <- as.vector(strep_infected_otu$phylum)
strep_otus <- as.vector(strep_infected_otu$OTU_short)
strep_infected_otu$genus <- NULL
strep_infected_otu$phylum <- NULL
strep_infected_otu$OTU_short <- NULL
strep_infected_otu <- as.data.frame(t(strep_infected_otu))
strep_mock_otu <- clean_merge(t(strep_mock_otu), otu_tax)
strep_mock_otu$genus <- NULL
strep_mock_otu$phylum <- NULL
strep_mock_otu$OTU_short <- NULL
strep_mock_otu <- as.data.frame(t(strep_mock_otu))
rm(otu_tax)
#--------------------------#
# Phylotype family-level shared file
# Convert to relative abundance
relabund_family <- (shared_family / rowSums(shared_family)) * 100
rm(shared_family)
# Bin lowly abundant OTUs into an 'Other' category
relabund_family[relabund_family < 1] <- 0
relabund_family <- relabund_family[, colSums(relabund_family != 0) > 0]
top_otus <- colnames(relabund_family)
# Subset family-level taxonomy
taxonomy_family <- subset(taxonomy_family, taxonomy_family$OTU %in% top_otus)
taxonomy_family$Taxonomy <- gsub('_', ' ', taxonomy_family$Taxonomy)
taxonomy_family <- taxonomy_family[order(taxonomy_family$Taxonomy),]
rm(top_otus)
# Sort shared based on OTUs and add 'Other' category
relabund_family <- relabund_family[match(as.vector(taxonomy_family$OTU), colnames(relabund_family)),]
relabund_family$Other <- 100 - rowSums(relabund_family)
taxonomy_family <- as.vector(taxonomy_family$Taxonomy)
taxonomy_family <- append(taxonomy_family, 'Other (<1% each)')
deps <- c('vegan', 'shape', 'plotrix', 'reshape2', 'GMD', 'Matrix')
for (dep in deps){
if (dep %in% installed.packages()[,"Package"] == FALSE){
install.packages(as.character(dep), quiet=TRUE);
}
library(dep, verbose=FALSE, character.only=TRUE)
}
