stripchart(at=1.65, jitter(strep_abx_metabolome[,i], amount=1e-5),
pch=21, bg=strep_col, method='jitter', jitter=0.12, cex=2, lwd=0.5, add=TRUE)
stripchart(at=1.2, jitter(cef_abx_metabolome[,i], amount=1e-5),
pch=21, bg=cef_col, method='jitter', jitter=0.12, cex=2, lwd=0.5, add=TRUE)
stripchart(at=0.66, jitter(clinda_abx_metabolome[,i], amount=1e-5),
pch=21, bg=clinda_col, method='jitter', jitter=0.12, cex=2, lwd=0.5, add=TRUE)
metabolite <- paste(colnames(strep_abx_metabolome)[i], ' [',as.character(round(abx_rf$MDA[i],3)),']', sep='')
legend('topright', legend=metabolite, pch=1, cex=1.3, pt.cex=0, bty='n')
mtext('|', side=4, cex=1.6, las=1, adj=-0.3, padj=-0.5)
mtext('|', side=4, cex=1.6, las=1, adj=-0.3, padj=-0.3)
mtext('|', side=4, cex=1.6, las=1, adj=-0.3, padj=1.7)
mtext('|', side=4, cex=1.6, las=1, adj=-0.3, padj=1.5)
mtext('|', side=4, cex=1.6, las=1, adj=-2.5, padj=-0.5)
mtext('|', side=4, cex=1.6, las=1, adj=-2.5, padj=-0.3)
mtext('|', side=4, cex=1.6, las=1, adj=-2.5, padj=0)
mtext('|', side=4, cex=1.6, las=1, adj=-2.5, padj=0.5)
mtext('|', side=4, cex=1.6, las=1, adj=-2.5, padj=1.5)
mtext('|', side=4, cex=1.6, las=1, adj=-2.5, padj=1.7)
if (abx_pvalues2[i] < 0.001){
mtext('***', side=4, font=2, cex=1, padj=0.8, adj=0.64)
} else if (abx_pvalues2[i] <= 0.01){
mtext('**', side=4, font=2, cex=1, padj=0.8, adj=0.64)
} else if (abx_pvalues2[i] <= 0.05){
mtext('*', side=4, font=2, cex=1, padj=0.8, adj=0.64)
} else {
mtext('n.s.', cex=0.7, side=4, padj=0.5, adj=0.64)
}
if (abx_pvalues1[i] < 0.001){
mtext('***', side=4, font=2, cex=1, padj=0.8, adj=0.27)
} else if (abx_pvalues1[i] <= 0.01){
mtext('**', side=4, font=2, cex=1, padj=0.8, adj=0.27)
} else if (abx_pvalues1[i] <= 0.05){
mtext('*', side=4, font=2, cex=1, padj=0.8, adj=0.27)
} else {
mtext('n.s.', cex=0.7, side=4, padj=0.5, adj=0.27)
}
if (abx_pvalues3[i] < 0.001){
mtext('***', side=4, font=2, cex=1, padj=2.2, adj=0.45)
} else if (abx_pvalues3[i] <= 0.01){
mtext('**', side=4, font=2, cex=1, padj=2.2, adj=0.45)
} else if (abx_pvalues3[i] <= 0.05){
mtext('*', side=4, font=2, cex=1, padj=2.2, adj=0.45)
} else {
mtext('n.s.', cex=0.7, side=4, padj=2.4, adj=0.45)
}
if (xmax <= 10) {
text(x=seq(0,xmax,1), y=0.42, labels=seq(0,xmax,1), cex=1)
axis(1, at=seq(0,5,1), NA, cex.axis=0.8, tck=0.015)
} else if (xmax > 1000){
text(x=seq(0,xmax,200), y=0.42, labels=seq(0,xmax,200), cex=1)
axis(1, at=seq(0,xmax,200), NA, cex.axis=0.8, tck=0.015)
} else if (xmax > 500){
text(x=seq(0,xmax,100), y=0.42, labels=seq(0,xmax,100), cex=1)
axis(1, at=seq(0,xmax,100), NA, cex.axis=0.8, tck=0.015)
} else if (xmax > 100){
text(x=seq(0,xmax,50), y=0.42, labels=seq(0,xmax,50), cex=1)
axis(1, at=seq(0,xmax,50), NA, cex.axis=0.8, tck=0.015)
} else if (xmax > 50){
text(x=seq(0,xmax,10), y=0.42, labels=seq(0,xmax,10), cex=1)
axis(1, at=seq(0,xmax,10), NA, cex.axis=0.8, tck=0.015)
} else {
text(x=seq(0,xmax,5), y=0.42, labels=seq(0,xmax,5), cex=1)
axis(1, at=seq(0,xmax,5), NA, cex.axis=0.8, tck=0.015)
}
segments(median(strep_abx_metabolome[,i]), 1.48, median(strep_abx_metabolome[,i]), 1.82, lwd=2.5)
segments(median(cef_abx_metabolome[,i]), 1.03, median(cef_abx_metabolome[,i]), 1.37, lwd=2.5)
segments(median(clinda_abx_metabolome[,i]), 0.49, median(clinda_abx_metabolome[,i]), 0.83, lwd=2.5)
}
par(mar=c(0, 0, 0, 0))
plot(0, type='n', axes=FALSE, xlab='', ylab='', xlim=c(-10,10), ylim=c(-5,5))
text(x=0, y=4, labels=expression(paste('Scaled Intensity (',log[10],')')), cex=1.4)
text(x=7, y=4.5, labels='OOB Error = 1.85%')
dev.off()
#-------------------------------------------------------------------------------------------------------------------------#
# Clean up
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only = TRUE)
}
setwd(starting_dir)
rm(list=ls())
gc()
# Set up environment
rm(list=ls())
gc()
# Load in functions
starting_dir <- getwd()
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Metabolomes
metabolome <- 'data/metabolome/scaled_intensities.log10.tsv'
# Input Metadata
metadata <- 'data/metadata.tsv'
# Output files
plot_abc <- 'results/figures/figure_4abc.pdf'
plot_d <- 'results/figures/figure_4d.pdf'
plot_e <- 'results/figures/figure_4e.pdf'
plot_f <- 'results/figures/figure_4f.pdf'
#----------------#
# Read in data
# Metabolomes
metabolome <- read.delim(metabolome, sep='\t', header=TRUE)
# Metadata
metadata <- read.delim(metadata, sep='\t', header=T, row.names=1)
#-------------------------------------------------------------------------------------------------------------------------#
# Format data
# Metadata
metadata$type <- NULL
metadata$cage <- NULL
metadata$mouse <- NULL
metadata$gender <- NULL
# Metabolomes
rownames(metabolome) <- metabolome$BIOCHEMICAL
metabolome$BIOCHEMICAL <- NULL
metabolome$PUBCHEM <- NULL
metabolome$KEGG <- NULL
metabolome$SUB_PATHWAY <- NULL
metabolome$SUPER_PATHWAY <- NULL
metabolome <- as.data.frame(t(metabolome))
colnames(metabolome) <- gsub('_', ' ', colnames(metabolome))
substr(colnames(metabolome), 1, 1) <- toupper(substr(colnames(metabolome), 1, 1))
#-------------------------------------------------------------------------------------------------------------------------#
# Ordination
# Prep data
metabolome <- clean_merge(metadata, metabolome)
metabolome <- subset(metabolome, abx != 'germfree')
cef_metabolome <- subset(metabolome, abx == 'cefoperazone')
cef_metabolome$abx <- NULL
cef_metabolome$susceptibility <- NULL
clinda_metabolome <- subset(metabolome, abx == 'clindamycin')
clinda_metabolome$abx <- NULL
clinda_metabolome$susceptibility <- NULL
strep_metabolome <- subset(metabolome, abx == 'streptomycin')
strep_metabolome$abx <- NULL
strep_metabolome$susceptibility <- NULL
# Calculate significant differences
strep_p <- round(adonis(strep_metabolome[,2:ncol(strep_metabolome)]~factor(strep_metabolome$infection), data=strep_metabolome, permutations=10000, method='jaccard')$aov.tab[[6]][1], 3)
strep_metabolome$infection <- NULL
cef_p <- round(adonis(cef_metabolome[,2:ncol(cef_metabolome)]~factor(cef_metabolome$infection), data=cef_metabolome, permutations=10000, method='jaccard')$aov.tab[[6]][1], 3)
cef_metabolome$infection <- NULL
clinda_p <- round(adonis(clinda_metabolome[,2:ncol(clinda_metabolome)]~factor(clinda_metabolome$infection), data=clinda_metabolome, permutations=10000, method='jaccard')$aov.tab[[6]][1], 3)
clinda_metabolome$infection <- NULL
# Calculate axes and merge with metadata
cef_metabolome_nmds <- metaMDS(cef_metabolome, k=2, trymax=100)$points
cef_metabolome_nmds <- clean_merge(metadata, cef_metabolome_nmds)
clinda_metabolome_nmds <- metaMDS(clinda_metabolome, k=2, trymax=100)$points
clinda_metabolome_nmds <- clean_merge(metadata, clinda_metabolome_nmds)
strep_metabolome_nmds <- metaMDS(strep_metabolome, k=2, trymax=100)$points
strep_metabolome_nmds <- clean_merge(metadata, strep_metabolome_nmds)
rm(cef_metabolome, clinda_metabolome, strep_metabolome)
# Subset to points for plot
cef_metabolome_nmds$MDS2 <- cef_metabolome_nmds$MDS2 - 0.02
clinda_metabolome_nmds$MDS1 <- clinda_metabolome_nmds$MDS1 + 0.1
clinda_metabolome_nmds$MDS2 <- clinda_metabolome_nmds$MDS2 + 0.02
cef_metabolome_nmds_630 <- subset(cef_metabolome_nmds, infection == '630')
cef_metabolome_nmds_mock <- subset(cef_metabolome_nmds, infection == 'mock')
clinda_metabolome_nmds_630 <- subset(clinda_metabolome_nmds, infection == '630')
clinda_metabolome_nmds_mock <- subset(clinda_metabolome_nmds, infection == 'mock')
strep_metabolome_nmds_630 <- subset(strep_metabolome_nmds, infection == '630')
strep_metabolome_nmds_mock <- subset(strep_metabolome_nmds, infection == 'mock')
# Calculate centroids
cef_metabolome_centoids <- aggregate(cbind(cef_metabolome_nmds$MDS1,cef_metabolome_nmds$MDS2)~cef_metabolome_nmds$infection, data=cef_metabolome_nmds, mean)
clinda_metabolome_centoids <- aggregate(cbind(clinda_metabolome_nmds$MDS1,clinda_metabolome_nmds$MDS2)~clinda_metabolome_nmds$infection, data=clinda_metabolome_nmds, mean)
strep_metabolome_centoids <- aggregate(cbind(strep_metabolome_nmds$MDS1,strep_metabolome_nmds$MDS2)~strep_metabolome_nmds$infection, data=strep_metabolome_nmds, mean)
#-------------------------------------------------------------------------------------------------------------------------#
# Feature selection
# Separate groups
cef_metabolome <- subset(metabolome, abx == 'cefoperazone')
cef_metabolome$abx <- NULL
cef_metabolome$susceptibility <- NULL
cef_metabolome$infection <- factor(cef_metabolome$infection)
clinda_metabolome <- subset(metabolome, abx == 'clindamycin')
clinda_metabolome$abx <- NULL
clinda_metabolome$susceptibility <- NULL
clinda_metabolome$infection <- factor(clinda_metabolome$infection)
strep_metabolome <- subset(metabolome, abx == 'streptomycin')
strep_metabolome$abx <- NULL
strep_metabolome$susceptibility <- NULL
strep_metabolome$infection <- factor(strep_metabolome$infection)
rm(metadata, metabolome)
# Random Forest
cef_rf <- featureselect_RF(cef_metabolome, 'infection')
clinda_rf <- featureselect_RF(clinda_metabolome, 'infection')
strep_rf <- featureselect_RF(strep_metabolome, 'infection')
# Sort and subset top hits
cef_rf <- cef_rf[order(-cef_rf$MDA),][1:5,]
clinda_rf <- clinda_rf[order(-clinda_rf$MDA),][1:5,]
strep_rf <- strep_rf[order(-strep_rf$MDA),][1:5,]
# Subset concentrations
inf_cef_metabolome <- subset(cef_metabolome, infection == '630')[, cef_rf$feature]
inf_cef_metabolome$infection<- NULL
mock_cef_metabolome <- subset(cef_metabolome, infection == 'mock')[, cef_rf$feature]
mock_cef_metabolome$infection<- NULL
rm(cef_metabolome)
inf_clinda_metabolome <- subset(clinda_metabolome, infection == '630')[, clinda_rf$feature]
inf_clinda_metabolome$infection<- NULL
mock_clinda_metabolome <- subset(clinda_metabolome, infection == 'mock')[, clinda_rf$feature]
mock_clinda_metabolome$infection<- NULL
rm(clinda_metabolome)
inf_strep_metabolome <- subset(strep_metabolome, infection == '630')[, strep_rf$feature]
inf_strep_metabolome$infection<- NULL
mock_strep_metabolome <- subset(strep_metabolome, infection == 'mock')[, strep_rf$feature]
mock_strep_metabolome$infection<- NULL
rm(strep_metabolome)
# Find significant differences
cef_pvalues <- c()
for (i in 1:ncol(inf_cef_metabolome)){cef_pvalues[i] <- wilcox.test(inf_cef_metabolome[,i], mock_cef_metabolome[,i], exact=FALSE)$p.value}
cef_pvalues <- p.adjust(cef_pvalues, method='BH')
clinda_pvalues <- c()
for (i in 1:ncol(inf_clinda_metabolome)){clinda_pvalues[i] <- wilcox.test(inf_clinda_metabolome[,i], mock_clinda_metabolome[,i], exact=FALSE)$p.value}
pvalues <- p.adjust(clinda_pvalues, method='BH')
strep_pvalues <- c()
for (i in 1:ncol(inf_strep_metabolome)){strep_pvalues[i] <- wilcox.test(inf_strep_metabolome[,i], mock_strep_metabolome[,i], exact=FALSE)$p.value}
strep_pvalues <- p.adjust(strep_pvalues, method='BH')
#-------------------------------------------------------------------------------------------------------------------------#
# Generate figure panels
# Ordinations
pdf(file=plot_abc, width=12, height=4)
layout(matrix(c(1,2,3),
nrow=1, ncol=3, byrow=TRUE))
par(mar=c(4,4,1,1), las=1, mgp=c(2.8,0.75,0))
#Streptomycin - Fig. 4a
plot(x=strep_metabolome_nmds$MDS1, y=strep_metabolome_nmds$MDS2, xlim=c(-0.25,0.25), ylim=c(-0.15,0.15),
xlab='NMDS axis 1', ylab='NMDS axis 2', pch=19, cex.axis=1.2, cex.lab=1.2)
mtext('a', side=2, line=2, las=2, adj=1.8, padj=-8.5, cex=1.6, font=2)
legend('topleft', legend='Streptomycin-pretreated', pch=1, cex=1.5, pt.cex=0, bty='n')
segments(x0=strep_metabolome_nmds_630$MDS1, y0=strep_metabolome_nmds_630$MDS2, x1=strep_metabolome_centoids[1,2], y1=strep_metabolome_centoids[1,3], col='gray30')
segments(x0=strep_metabolome_nmds_mock$MDS1, y0=strep_metabolome_nmds_mock$MDS2, x1=strep_metabolome_centoids[2,2], y1=strep_metabolome_centoids[2,3], col='gray30')
points(x=strep_metabolome_nmds_630$MDS1, y=strep_metabolome_nmds_630$MDS2, bg=strep_col, pch=21, cex=2, lwd=1.2)
points(x=strep_metabolome_nmds_mock$MDS1, y=strep_metabolome_nmds_mock$MDS2, bg=strep_col, pch=24, cex=2, lwd=1.2)
legend('bottomleft', legend=c('Mock vs Infected', as.expression(bquote(paste(italic('p'),' = 0.039 *')))),
pch=1, cex=1.4, pt.cex=0, bty='n')
legend('bottomright', legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))),'Mock-infected'),
col='black', pch=c(19,17), cex=1.2, pt.cex=2)
# Cefoperazone - Fig. 4b
plot(x=cef_metabolome_nmds$MDS1, y=cef_metabolome_nmds$MDS2, xlim=c(-0.15,0.15), ylim=c(-0.15,0.15),
xlab='NMDS axis 1', ylab='NMDS axis 2', pch=19, cex.axis=1.2, cex.lab=1.2)
mtext('b', side=2, line=2, las=2, adj=1.8, padj=-8.5, cex=1.6, font=2)
legend('topleft', legend='Cefoperazone-pretreated', pch=1, cex=1.5, pt.cex=0, bty='n')
segments(x0=cef_metabolome_nmds_630$MDS1, y0=cef_metabolome_nmds_630$MDS2, x1=cef_metabolome_centoids[1,2], y1=cef_metabolome_centoids[1,3], col='gray30')
segments(x0=cef_metabolome_nmds_mock$MDS1, y0=cef_metabolome_nmds_mock$MDS2, x1=cef_metabolome_centoids[2,2], y1=cef_metabolome_centoids[2,3], col='gray30')
points(x=cef_metabolome_nmds_630$MDS1, y=cef_metabolome_nmds_630$MDS2, bg=cef_col, pch=21, cex=2, lwd=1.2)
points(x=cef_metabolome_nmds_mock$MDS1, y=cef_metabolome_nmds_mock$MDS2, bg=cef_col, pch=24, cex=2, lwd=1.2)
legend('bottomleft', legend=c('Mock vs Infected', as.expression(bquote(paste(italic('p'),' = 0.016 *')))),
pch=1, cex=1.4, pt.cex=0, bty='n')
legend('bottomright', legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))),'Mock-infected'),
col='black', pch=c(19,17), cex=1.2, pt.cex=2)
# Clindamycin - Fig. 4c
plot(x=clinda_metabolome_nmds$MDS1-0.075, y=clinda_metabolome_nmds$MDS2, xlim=c(-0.15,0.15), ylim=c(-0.1,0.1),
xlab='NMDS axis 1', ylab='NMDS axis 2', pch=19, cex.axis=1.2, cex.lab=1.2)
mtext('c', side=2, line=2, las=2, adj=1.8, padj=-8.5, cex=1.6, font=2)
legend('topleft', legend='Clindamycin-pretreated', pch=1, cex=1.5, pt.cex=0, bty='n')
segments(x0=clinda_metabolome_nmds_630$MDS1-0.075, y0=clinda_metabolome_nmds_630$MDS2, x1=clinda_metabolome_centoids[1,2]-0.075, y1=clinda_metabolome_centoids[1,3], col='gray30')
segments(x0=clinda_metabolome_nmds_mock$MDS1-0.0751, y0=clinda_metabolome_nmds_mock$MDS2, x1=clinda_metabolome_centoids[2,2]-0.075, y1=clinda_metabolome_centoids[2,3], col='gray30')
points(x=clinda_metabolome_nmds_630$MDS1-0.075, y=clinda_metabolome_nmds_630$MDS2, bg=clinda_col, pch=21, cex=2, lwd=1.2)
points(x=clinda_metabolome_nmds_mock$MDS1-0.075, y=clinda_metabolome_nmds_mock$MDS2, bg=clinda_col, pch=24, cex=2, lwd=1.2)
legend('bottomleft', legend=c('Mock vs Infected',as.expression(bquote(paste(italic('p'),' = 0.127 n.s.')))),
pch=1, cex=1.4, pt.cex=0, bty='n')
legend('bottomright', legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))),'Mock-infected'),
col='black', pch=c(19,17), cex=1.2, pt.cex=2)
dev.off()
# Feature Selection
# Strep Infected - Fig. 4b
metabolite_stripchart(plot_d, inf_strep_metabolome, mock_strep_metabolome, strep_pvalues, strep_rf$MDA,
0, 'Infected', 'Mock', 'Streptomycin-pretreated', strep_col, 'd', 'mediumorchid4', 'chartreuse2')
# Cef Infected - Fig. 4c
metabolite_stripchart(plot_e, inf_cef_metabolome, mock_cef_metabolome, cef_pvalues, cef_rf$MDA,
0, 'Infected', 'Mock', 'Cefoperazone-pretreated', cef_col, 'e', 'mediumorchid4', 'chartreuse2')
# Clinda Infected - Fig. 4d
metabolite_stripchart(plot_f, inf_clinda_metabolome, mock_clinda_metabolome, clinda_pvalues, clinda_rf$MDA,
44.44, 'Infected', 'Mock', 'Clindamycin-pretreated', clinda_col, 'f', 'mediumorchid4', 'chartreuse2')
#-------------------------------------------------------------------------------------------------------------------------------------#
#Clean up
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only = TRUE)
}
setwd(starting_dir)
rm(list=ls())
gc()
# Set up environment
rm(list=ls())
gc()
# Load in functions
starting_dir <- getwd()
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Define files
# Normalized Metatranscriptomes
cef_normalized_reads <- 'data/read_mapping/cef_normalized_metaT.tsv'
clinda_normalized_reads <- 'data/read_mapping/clinda_normalized_metaT.tsv'
strep_normalized_reads <- 'data/read_mapping/strep_normalized_metaT.tsv'
# KEGG taxonomy IDs
kegg_tax <- 'data/kegg_taxonomy.tsv'
# Taxonomy colors
tax_colors <- 'data/taxonomy_color.tsv'
# Output plot
plot_file <- 'results/figures/figure_6.tiff'
#-------------------------------------------------------------------------------------------------------------------------#
# Read in data
# Normalized Metatranscriptomes
cef_normalized_reads <- read.delim(cef_normalized_reads, sep='\t', header=TRUE, row.names=7)
clinda_normalized_reads <- read.delim(clinda_normalized_reads, sep='\t', header=TRUE, row.names=7)
strep_normalized_reads <- read.delim(strep_normalized_reads, sep='\t', header=TRUE, row.names=7)
# KEGG organism file
kegg_tax <- read.delim(kegg_tax, sep='\t', header=TRUE)
kegg_tax[] <- lapply(kegg_tax, as.character)
# Taxonomy colors
tax_colors <- read.delim(tax_colors, sep='\t', header=TRUE)
tax_colors[] <- lapply(tax_colors, as.character)
#-------------------------------------------------------------------------------------------------------------------------#
# Format transcription
cef_normalized_reads$gene <- NULL
cef_normalized_reads[,c(1:2)] <- log2(cef_normalized_reads[,c(1:2)] + 1)
clinda_normalized_reads$gene <- NULL
clinda_normalized_reads[,c(1:2)] <- log2(clinda_normalized_reads[,c(1:2)] + 1)
strep_normalized_reads$gene <- NULL
strep_normalized_reads[,c(1:2)] <- log2(strep_normalized_reads[,c(1:2)] + 1)
# Remove those genes without an organism annotation
cef_annotated <- cef_normalized_reads[!is.na(cef_normalized_reads$organism),]
clinda_annotated <- clinda_normalized_reads[!is.na(clinda_normalized_reads$organism),]
strep_annotated <- strep_normalized_reads[!is.na(strep_normalized_reads$organism),]
# Remove any C. difficile genes with transcription only in infected
cdiff_omit <- c('cdf','pdc','cdc','cdl','pdf')
cef_annotated <- subset(cef_annotated, !(cef_annotated$organism %in% cdiff_omit))
clinda_annotated <- subset(clinda_annotated, !(clinda_annotated$organism %in% cdiff_omit))
strep_annotated <- subset(strep_annotated, !(strep_annotated$organism %in% cdiff_omit))
rm(cdiff_omit)
# Remove all possible mammalian genes
mamm_omit <- c('fab','cfa','ggo','hgl','hsa','mcc','mdo','pon','aml',
'ptr','rno','shr','ssc','aml','bta','cge','ecb',
'pps','fca','mmu','oaa','gga','ola','acs','aga')
strep_annotated <- subset(strep_annotated, !(strep_annotated$organism %in% mamm_omit))
cef_annotated <- subset(cef_annotated, !(cef_annotated$organism %in% mamm_omit))
clinda_annotated <- subset(clinda_annotated, !(clinda_annotated$organism %in% mamm_omit))
rm(mamm_omit)
# Calculate correlation coefficients
strep_corr <- as.character(round(cor.test(strep_annotated[,2], strep_annotated[,1], method='spearman', exact=FALSE)$estimate, digits=3))
cef_corr <- as.character(round(cor.test(cef_annotated[,2], cef_annotated[,1], method='spearman', exact=FALSE)$estimate, digits=3))
clinda_corr <- as.character(round(cor.test(clinda_annotated[,2], clinda_annotated[,1], method='spearman', exact=FALSE)$estimate, digits=3))
# Using previously defined lines, find outliers to y = x
strep_630_outliers <- subset(strep_annotated, strep_annotated$strep_630_metaT_reads > strep_annotated$strep_mock_metaT_reads + 2)
strep_mock_outliers <- subset(strep_annotated, strep_annotated$strep_mock_metaT_reads > strep_annotated$strep_630_metaT_reads + 2)
cef_630_outliers <- subset(cef_annotated, cef_annotated$cef_630_metaT_reads > cef_annotated$cef_mock_metaT_reads + 2)
cef_mock_outliers <- subset(cef_annotated, cef_annotated$cef_mock_metaT_reads > cef_annotated$cef_630_metaT_reads + 2)
clinda_630_outliers <- clinda_annotated[(clinda_annotated$clinda_630_metaT_reads > clinda_annotated$clinda_mock_metaT_reads + 2),]
clinda_mock_outliers <- clinda_annotated[(clinda_annotated$clinda_mock_metaT_reads > clinda_annotated$clinda_630_metaT_reads + 2),]
# Remove outliers from the rest of the genes
strep_annotated <- strep_annotated[!row.names(strep_annotated) %in% row.names(strep_630_outliers), ]
strep_annotated <- strep_annotated[!row.names(strep_annotated) %in% row.names(strep_mock_outliers), ]
cef_annotated <- cef_annotated[!row.names(cef_annotated) %in% row.names(cef_630_outliers), ]
cef_annotated <- cef_annotated[!row.names(cef_annotated) %in% row.names(cef_mock_outliers), ]
clinda_annotated <- clinda_annotated[!row.names(clinda_annotated) %in% row.names(clinda_630_outliers), ]
clinda_annotated <- clinda_annotated[!row.names(clinda_annotated) %in% row.names(clinda_mock_outliers), ]
# Calculate mean distance of outliers to x=y
dists_630 <- c()
for (i in 1:nrow(strep_630_outliers)){
dists_630[i] <- dist_xy(c(strep_630_outliers$strep_630_metaT_reads[i], strep_630_outliers$strep_mock_metaT_reads[i]))
}
dists_mock <- c()
for (i in 1:nrow(strep_mock_outliers)){
dists_mock[i] <- dist_xy(c(strep_mock_outliers$strep_630_metaT_reads[i], strep_mock_outliers$strep_mock_metaT_reads[i]))
}
round(mean(c(dists_630, dists_mock)), 3)
as.numeric(length(c(dists_630, dists_mock)))
dists_630 <- c()
for (i in 1:nrow(cef_630_outliers)){
dists_630[i] <- dist_xy(c(cef_630_outliers$cef_630_metaT_reads[i], cef_630_outliers$cef_mock_metaT_reads[i]))
}
dists_mock <- c()
for (i in 1:nrow(cef_mock_outliers)){
dists_mock[i] <- dist_xy(c(cef_mock_outliers$cef_630_metaT_reads[i], cef_mock_outliers$cef_mock_metaT_reads[i]))
}
round(mean(c(dists_630, dists_mock)), 3)
as.numeric(length(c(dists_630, dists_mock)))
dists_630 <- c()
for (i in 1:nrow(clinda_630_outliers)){
dists_630[i] <- dist_xy(c(clinda_630_outliers$clinda_630_metaT_reads[i], clinda_630_outliers$clinda_mock_metaT_reads[i]))
}
dists_mock <- c()
for (i in 1:nrow(clinda_mock_outliers)){
dists_mock[i] <- dist_xy(c(clinda_mock_outliers$clinda_630_metaT_reads[i], clinda_mock_outliers$clinda_mock_metaT_reads[i]))
}
round(mean(c(dists_630, dists_mock)), 3)
as.numeric(length(c(dists_630, dists_mock)))
rm(dists_630, dists_mock)
#-------------------------------------------------------------------------------------------------------------------------#
# Break down outliers into taxonomic groups
# Drop levels
strep_630_outliers[] <- lapply(strep_630_outliers, as.character)
strep_mock_outliers[] <- lapply(strep_mock_outliers, as.character)
cef_630_outliers[] <- lapply(cef_630_outliers, as.character)
cef_mock_outliers[] <- lapply(cef_mock_outliers, as.character)
clinda_630_outliers[] <- lapply(clinda_630_outliers, as.character)
clinda_mock_outliers[] <- lapply(clinda_mock_outliers, as.character)
strep_annotated[] <- lapply(strep_annotated, as.character)
cef_annotated[] <- lapply(cef_annotated, as.character)
clinda_annotated[] <- lapply(clinda_annotated, as.character)
# Save KEGG ID names
strep_630_outliers$kegg_id <- rownames(strep_630_outliers)
strep_mock_outliers$kegg_id <- rownames(strep_mock_outliers)
cef_630_outliers$kegg_id <- rownames(cef_630_outliers)
cef_mock_outliers$kegg_id <- rownames(cef_mock_outliers)
clinda_630_outliers$kegg_id <- rownames(clinda_630_outliers)
clinda_mock_outliers$kegg_id <- rownames(clinda_mock_outliers)
strep_annotated$kegg_id <- rownames(strep_annotated)
cef_annotated$kegg_id <- rownames(cef_annotated)
clinda_annotated$kegg_id <- rownames(clinda_annotated)
# Merge with KEGG taxonomy
strep_630_outliers <- merge(x=strep_630_outliers, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
strep_630_outliers$org_code <- NULL
strep_630_outliers$strep_630_metaT_reads <- as.numeric(strep_630_outliers$strep_630_metaT_reads)
strep_630_outliers$strep_mock_metaT_reads <- as.numeric(strep_630_outliers$strep_mock_metaT_reads)
strep_mock_outliers <- merge(x=strep_mock_outliers, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
strep_mock_outliers$org_code <- NULL
strep_mock_outliers$strep_630_metaT_reads <- as.numeric(strep_mock_outliers$strep_630_metaT_reads)
strep_mock_outliers$strep_mock_metaT_reads <- as.numeric(strep_mock_outliers$strep_mock_metaT_reads)
cef_630_outliers <- merge(x=cef_630_outliers, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
cef_630_outliers$org_code <- NULL
cef_630_outliers$cef_630_metaT_reads <- as.numeric(cef_630_outliers$cef_630_metaT_reads)
cef_630_outliers$cef_mock_metaT_reads <- as.numeric(cef_630_outliers$cef_mock_metaT_reads)
cef_mock_outliers <- merge(x=cef_mock_outliers, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
cef_mock_outliers$org_code <- NULL
cef_mock_outliers$cef_630_metaT_reads <- as.numeric(cef_mock_outliers$cef_630_metaT_reads)
cef_mock_outliers$cef_mock_metaT_reads <- as.numeric(cef_mock_outliers$cef_mock_metaT_reads)
clinda_630_outliers <- merge(x=clinda_630_outliers, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
clinda_630_outliers$org_code <- NULL
clinda_630_outliers$clinda_630_metaT_reads <- as.numeric(clinda_630_outliers$clinda_630_metaT_reads)
clinda_630_outliers$clinda_mock_metaT_reads <- as.numeric(clinda_630_outliers$clinda_mock_metaT_reads)
clinda_mock_outliers <- merge(x=clinda_mock_outliers, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
clinda_mock_outliers$org_code <- NULL
clinda_mock_outliers$clinda_630_metaT_reads <- as.numeric(clinda_mock_outliers$clinda_630_metaT_reads)
clinda_mock_outliers$clinda_mock_metaT_reads <- as.numeric(clinda_mock_outliers$clinda_mock_metaT_reads)
strep_annotated <- merge(x=strep_annotated, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
strep_annotated$org_code <- NULL
strep_annotated$strep_630_metaT_reads <- as.numeric(strep_annotated$strep_630_metaT_reads)
strep_annotated$strep_mock_metaT_reads <- as.numeric(strep_annotated$strep_mock_metaT_reads)
cef_annotated <- merge(x=cef_annotated, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
cef_annotated$org_code <- NULL
cef_annotated$cef_630_metaT_reads <- as.numeric(cef_annotated$cef_630_metaT_reads)
cef_annotated$cef_mock_metaT_reads <- as.numeric(cef_annotated$cef_mock_metaT_reads)
clinda_annotated <- merge(x=clinda_annotated, y=kegg_tax, by.x='organism', by.y='org_code', all.x=TRUE)
clinda_annotated$org_code <- NULL
clinda_annotated$clinda_630_metaT_reads <- as.numeric(clinda_annotated$clinda_630_metaT_reads)
clinda_annotated$clinda_mock_metaT_reads <- as.numeric(clinda_annotated$clinda_mock_metaT_reads)
rm(kegg_tax)
#-------------------------------------------------------------------------------------------------------------------------#
# Get points ready for plotting
# Define colors based on genus
strep_630_outliers <- merge(x=strep_630_outliers, y=tax_colors, by.x='genus', by.y='taxonomy', all.x=TRUE)
strep_630_outliers$color[is.na(strep_630_outliers$color)] <- 'white'
strep_mock_outliers <- merge(x=strep_mock_outliers, y=tax_colors, by.x='genus', by.y='taxonomy', all.x=TRUE)
strep_mock_outliers$color[is.na(strep_mock_outliers$color)] <- 'white'
cef_630_outliers <- merge(x=cef_630_outliers, y=tax_colors, by.x='genus', by.y='taxonomy', all.x=TRUE)
cef_630_outliers$color[is.na(cef_630_outliers$color)] <- 'white'
cef_mock_outliers <- merge(x=cef_mock_outliers, y=tax_colors, by.x='genus', by.y='taxonomy', all.x=TRUE)
cef_mock_outliers$color[is.na(cef_mock_outliers$color)] <- 'white'
clinda_630_outliers <- merge(x=clinda_630_outliers, y=tax_colors, by.x='genus', by.y='taxonomy', all.x=TRUE)
clinda_630_outliers$color[is.na(clinda_630_outliers$color)] <- 'white'
clinda_mock_outliers <- merge(x=clinda_mock_outliers, y=tax_colors, by.x='genus', by.y='taxonomy', all.x=TRUE)
clinda_mock_outliers$color[is.na(clinda_mock_outliers$color)] <- 'white'
rm(tax_colors)
# Subset out other bacteria group
strep_630_outliers_other <- subset(strep_630_outliers, color == 'white')
strep_630_outliers <- subset(strep_630_outliers, color != 'white')
strep_mock_outliers_other <- subset(strep_mock_outliers, color == 'white')
strep_mock_outliers <- subset(strep_mock_outliers, color != 'white')
cef_630_outliers_other <- subset(cef_630_outliers, color == 'white')
cef_630_outliers <- subset(cef_630_outliers, color != 'white')
cef_mock_outliers_other <- subset(cef_mock_outliers, color == 'white')
cef_mock_outliers <- subset(cef_mock_outliers, color != 'white')
clinda_630_outliers_other <- subset(clinda_630_outliers, color == 'white')
clinda_630_outliers <- subset(clinda_630_outliers, color != 'white')
clinda_mock_outliers_other <- subset(clinda_mock_outliers, color == 'white')
clinda_mock_outliers <- subset(clinda_mock_outliers, color != 'white')
# Make sure Archeael points are visible
strep_630_archeae <- subset(strep_630_outliers, color == '#FF8000')
strep_mock_archeae <- subset(strep_mock_outliers, color == '#FF8000')
cef_630_archeae <- subset(cef_630_outliers, color == '#FF8000')
cef_mock_archeae <- subset(cef_mock_outliers, color == '#FF8000')
clinda_630_archeae <- subset(clinda_630_outliers, color == '#FF8000')
clinda_mock_archeae <- subset(clinda_mock_outliers, color == '#FF8000')
# Make sure Actinobacteria points are visible
strep_630_actino <- rbind(subset(strep_630_outliers, color == '#009900'),
subset(strep_630_outliers, color == '#006600'),
subset(strep_630_outliers, color == '#33FF33'))
strep_mock_actino <- rbind(subset(strep_mock_outliers, color == '#009900'),
subset(strep_mock_outliers, color == '#006600'),
subset(strep_mock_outliers, color == '#33FF33'))
cef_630_actino <- rbind(subset(cef_630_outliers, color == '#009900'),
subset(cef_630_outliers, color == '#006600'),
subset(cef_630_outliers, color == '#33FF33'))
cef_mock_actino <- rbind(subset(cef_mock_outliers, color == '#009900'),
subset(cef_mock_outliers, color == '#006600'),
subset(cef_mock_outliers, color == '#33FF33'))
clinda_630_actino <- rbind(subset(clinda_630_outliers, color == '#009900'),
subset(clinda_630_outliers, color == '#006600'),
subset(clinda_630_outliers, color == '#33FF33'))
clinda_mock_actino <- rbind(subset(clinda_mock_outliers, color == '#009900'),
subset(clinda_mock_outliers, color == '#006600'),
subset(clinda_mock_outliers, color == '#33FF33'))
clinda_mock_ecoli <- subset(clinda_mock_outliers, color == '#CCCC00')
#-------------------------------------------------------------------------------------------------------------------------#
# Check the count of genes for each genus in outlier groups
table(strep_630_outliers$genus) # upper
table(strep_mock_outliers$genus) # lower
table(cef_630_outliers$genus) # upper
table(cef_mock_outliers$genus) # lower
table(clinda_630_outliers$genus) # upper
table(clinda_mock_outliers$genus) # lower
# Do the same for those in the gray area
table(strep_annotated$genus)
table(cef_annotated$genus)
table(clinda_annotated$genus)
