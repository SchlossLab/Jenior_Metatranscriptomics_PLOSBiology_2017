minor_ticks <- c(0.18,0.34,0.48,0.6,0.7,0.78,0.84,0.9,0.94,0.98)
short_ticks <- c(log10(strep_size/1000)-0.33,log10(strep_size/1000)-0.2,log10(strep_size/1000)-0.1,log10(strep_size/1000)-0.05)
#-------------------------------------------------------------------#
# Family-level phylotype bar chart
par(mar=c(5,5,1,1), mgp=c(2.5, 0.25, 0), new=FALSE, xpd=FALSE)
barplot(t(rev(relabund_family)), col=rev(taxonomy_family$color), yaxt='n', xaxt='n', cex.lab=1.3,
ylim=c(0,100), ylab='Relative Abundance', cex.names=1.2, space=0)
box()
axis(side=2, at=seq(0,100,20), labels=c('0%','20%','40%','60%','80%','100%'), tick=FALSE, las=1)
abline(h=c(20,40,60,80), lty=2)
# Lines under plot
arrows(0.3, -2, 7.7, -2, angle=0, length=0, lwd=2, xpd=TRUE) # no abx
arrows(9.3, -2, 17.7, -2, angle=0, length=0, lwd=2, xpd=TRUE) # strep - cdi
arrows(18.3, -2, 26.7, -2, angle=0, length=0, lwd=2, xpd=TRUE) # strep - mock
arrows(28.3, -2, 35.7, -2, angle=0, length=0, lwd=2, xpd=TRUE) # cef - cdi
arrows(36.3, -2, 44.7, -2, angle=0, length=0, lwd=2, xpd=TRUE) # cef - mock
arrows(46.3, -2, 54.7, -2, angle=0, length=0, lwd=2, xpd=TRUE) # clinda - cdi
arrows(55.3, -2, 63.7, -2, angle=0, length=0, lwd=2, xpd=TRUE) # clinda - mock
mtext(rep('CDI',3), side=1, at=c(13.5,32,50.5), adj=0.5, padj=1, cex=0.7)
mtext(rep('Mock',4), side=1, at=c(4,22.5,40.5,59.5), adj=0.5, padj=1, cex=0.7)
mtext(c('No Antibiotics','Streptomycin-pretreated','Cefoperazone-pretreated','Clindamycin-pretreated'),
side=1, at=c(4,18,36,55), adj=0.5, padj=2.5, cex=0.85, col=c('black',strep_col, cef_col, clinda_col))
mtext('a', side=2, line=2, las=2, adj=2.5, padj=-8, cex=1.3, font=2)
# Create a figure legend in empty plot
par(mar=c(4,0,0.3,3))
plot(0, type='n', ylim=c(-5,5), xlim=c(5,5), ylab='', xlab='', xaxt='n', yaxt='n', axes=FALSE)
legend('topright', legend=taxonomy_family$family, pt.bg=taxonomy_family$color,
pch=22, pt.cex=2.5, cex=1.1, bty='n')
# Add in phylum classifications
segments(x0=c(4.8,4.8,4.8,4.8,4.8), x1=c(4.8,4.8,4.8,4.8,4.8),
y0=c(5,4.4,1.55,-2.4,-3.5),
y1=c(4.6,1.85,-2.1,-3.25,-3.9), lwd=3) # vertical
segments(x0=c(4.4,4.4,4.28,4.43,4.48), x1=c(4.8,4.8,4.8,4.8,4.8),
y0=c(4.8,3.125,-0.275,-2.8,-3.7),
y1=c(4.8,3.125,-0.275,-2.8,-3.7), lwd=2) # horizontal
text(x=c(3.75,3.75,3.75,3.75,3.75), y=c(4.8,3.125,-0.275,-2.8,-3.7), cex=1.2,
labels=c('Actinobacteria', 'Bacteroidetes', 'Firmicutes', 'Proteobacteria', 'Verrucomicrobia'))
#-------------------------------------------------------------------#
# Significant OTUs and relative abundance changes
# Streptomycin plot
par(mar=c(4, 13, 2, 1), mgp=c(2.3, 0.75, 0), xpd=FALSE, yaxs='i')
plot(1, type='n', ylim=c(0,nrow(strep_lefse)*2), xlim=c(0,log10(strep_size)),
ylab='', xlab='Relative Abundance %', xaxt='n', yaxt='n')
title('Streptomycin-pretreated', line=0.5, cex.main=1.3, col.main=strep_col, font.main=1)
index <- 1
for(i in c(1:ncol(strep_mock_otu))){
stripchart(at=index-0.35, jitter(strep_mock_otu[,i], amount=1e-5),
pch=21, bg='gray80', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
stripchart(at=index+0.35, jitter(strep_infected_otu[,i], amount=1e-5),
pch=21, bg='black', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
if (i != ncol(strep_mock_otu)){
abline(h=index+1, lty=2)
}
segments(median(strep_mock_otu[,i]), index-0.6, median(strep_mock_otu[,i]), index, lwd=2) #adds line for median
segments(median(strep_infected_otu[,i]), index+0.6, median(strep_infected_otu[,i]), index, lwd=2)
if (wilcox.test(strep_mock_otu[,i], strep_infected_otu[,i], exact=FALSE)$p.value <= 0.05){
text(x=log10(strep_size)+0.25, y=index, labels='*', font=2, cex=1.8, xpd=TRUE)
}
index <- index + 2
}
axis(1, at=c(0,(log10(strep_size/1000)),(log10(strep_size/100)),(log10(strep_size/10)),log10(strep_size)), labels=c('0','0.1','1','10','100'))
legend('topright', legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))), 'Mock-infected'),
pch=c(21, 21), pt.bg=c('black','gray80'), bg='white', pt.cex=1.4, cex=0.9)
formatted_names <- lapply(1:nrow(strep_lefse), function(i) bquote(paste(italic(.(strep_lefse$genus[i])), ' ', .(as.vector(strep_lefse$OTU)[i]), sep='')))
axis(2, at=seq(1,index-2,2)+0.4, labels=do.call(expression, formatted_names), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
formatted_p <- lapply(1:nrow(strep_lefse), function(i) bquote(paste(.(as.vector(strep_lefse$phylum)[i]), '; ', italic('p'), ' = ', .(strep_lefse$pValue[i]), sep='')))
axis(2, at=seq(1,index-2,2)-0.4, labels=do.call(expression, formatted_p), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
axis(side=1, at=short_ticks+0.03, label=rep('',length(short_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+0.42, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+1.42, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+2.42, label=rep('',length(minor_ticks)), tck=-0.01)
mtext('b', side=2, line=2, las=2, adj=10, padj=-9, cex=1.3, font=2)
#-----------------#
# Cefoperazone plot
plot(1, type='n', ylim=c(0,nrow(cef_lefse)*2), xlim=c(0,log10(cef_size)),
ylab='', xlab='Relative Abundance %', xaxt='n', yaxt='n')
title('Cefoperazone-pretreated', line=0.5, cex.main=1.3, col.main=cef_col, font.main=1)
index <- 1
for(i in c(1:ncol(cef_mock_otu))){
stripchart(at=index-0.35, jitter(cef_mock_otu[,i], amount=1e-5),
pch=21, bg='gray80', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
stripchart(at=index+0.35, jitter(cef_infected_otu[,i], amount=1e-5),
pch=21, bg='black', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
if (i != ncol(cef_mock_otu)){
abline(h=index+1, lty=2)
}
segments(median(cef_mock_otu[,i]), index-0.6, median(cef_mock_otu[,i]), index, lwd=2) #adds line for median
segments(median(cef_infected_otu[,i]), index+0.6, median(cef_infected_otu[,i]), index, lwd=2)
if (wilcox.test(cef_mock_otu[,i], cef_infected_otu[,i], exact=FALSE)$p.value <= 0.05){
text(x=log10(cef_size)+0.25, y=index, labels='*', font=2, cex=1.8, xpd=TRUE)
}
index <- index + 2
}
axis(1, at=c(0,(log10(cef_size/1000)),(log10(cef_size/100)),(log10(cef_size/10)),log10(cef_size)), labels=c('0','0.1','1','10','100'))
legend('topright', legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))), 'Mock-infected'),
pch=c(21, 21), pt.bg=c('black','gray80'), bg='white', pt.cex=1.4, cex=0.9)
formatted_names <- lapply(1:nrow(cef_lefse), function(i) bquote(paste(italic(.(cef_lefse$genus[i])), ' ', .(as.vector(cef_lefse$OTU)[i]), sep='')))
axis(2, at=seq(1,index-2,2)+0.4, labels=do.call(expression, formatted_names), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
formatted_p <- lapply(1:nrow(cef_lefse), function(i) bquote(paste(.(as.vector(cef_lefse$phylum)[i]), '; ', italic('p'), ' = ', .(cef_lefse$pValue[i]), sep='')))
axis(2, at=seq(1,index-2,2)-0.4, labels=do.call(expression, formatted_p), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
cef_ticks <- c(log10(cef_size/1000)-0.55,log10(cef_size/1000)-0.35,log10(cef_size/1000)-0.2,log10(cef_size/1000)-0.1,log10(cef_size/1000)-0.05)
axis(side=1, at=cef_ticks+0.02, label=rep('',length(cef_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+0.74, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+1.74, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+2.74, label=rep('',length(minor_ticks)), tck=-0.01)
mtext('c', side=2, line=2, las=2, adj=11, padj=-9, cex=1.3, font=2)
#-----------------#
# Clindamycin plot
plot(1, type='n', ylim=c(0,nrow(clinda_lefse)*2), xlim=c(0,log10(clinda_size)),
ylab='', xlab='Relative Abundance %', xaxt='n', yaxt='n')
title('Clindamycin-pretreated', line=0.5, cex.main=1.3, col.main=clinda_col, font.main=1)
index <- 1
for(i in c(1:ncol(clinda_mock_otu))){
stripchart(at=index-0.25, jitter(clinda_mock_otu[,i], amount=1e-5),
pch=21, bg='gray80', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
stripchart(at=index+0.25, jitter(clinda_infected_otu[,i], amount=1e-5),
pch=21, bg='black', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
if (i != ncol(clinda_mock_otu)){
abline(h=index+1, lty=2)
}
segments(median(clinda_mock_otu[,i]), index-0.6, median(clinda_mock_otu[,i]), index, lwd=2) #adds line for median
segments(median(clinda_infected_otu[,i]), index+0.6, median(clinda_infected_otu[,i]), index, lwd=2)
if (wilcox.test(clinda_mock_otu[,i], clinda_infected_otu[,i], exact=FALSE)$p.value <= 0.05){
text(x=log10(clinda_size)+0.25, y=index, labels='*', font=2, cex=1.8, xpd=TRUE)
}
index <- index + 2
}
axis(1, at=c(0,(log10(clinda_size/1000)),(log10(clinda_size/100)),(log10(clinda_size/10)),log10(clinda_size)), labels=c('0','0.1','1','10','100'))
legend('topright', legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))), 'Mock-infected'),
pch=c(21, 21), pt.bg=c('black','gray80'), bg='white', pt.cex=1.4, cex=0.9)
formatted_names <- lapply(1:nrow(clinda_lefse), function(i) bquote(paste(italic(.(clinda_lefse$genus[i])), ' ', .(as.vector(clinda_lefse$OTU)[i]), sep='')))
axis(2, at=seq(1,index-2,2)+0.25, labels=do.call(expression, formatted_names), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
formatted_p <- lapply(1:nrow(clinda_lefse), function(i) bquote(paste(.(as.vector(clinda_lefse$phylum)[i]), '; ', italic('p'), ' = ', .(clinda_lefse$pValue[i]), sep='')))
axis(2, at=seq(1,index-2,2)-0.25, labels=do.call(expression, formatted_p), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
axis(side=1, at=short_ticks, label=rep('',length(short_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+0.4, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+1.4, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+2.4, label=rep('',length(minor_ticks)), tck=-0.01)
mtext('d', side=2, line=2, las=2, adj=10, padj=-9, cex=1.3, font=2)
dev.off()
#-------------------------------------------------------------------------------------------------------------------------------------#
#Clean up
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only = TRUE)
}
setwd(starting_dir)
rm(list=ls())
gc()
# Set up environment
rm(list=ls())
gc()
# Load in functions
starting_dir <- getwd()
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Define files
# Metadata
metadata <- 'data/metadata.tsv'
# Metabolomes
metabolome <- 'data/metabolome/scaled_intensities.log10.tsv'
# Output plot
plot_4 <- 'results/supplement/figures/figure_S4.pdf'
plot_5a <- 'results/supplement/figures/figure_S5a.pdf'
plot_5b <- 'results/supplement/figures/figure_S5b.pdf'
plot_5c <- 'results/supplement/figures/figure_S5c.pdf'
# Supplementary table
supp_table3 <- 'results/supplement/tables/table_S4.tsv'
#-------------------------------------------------------------------------------------------------------------------------#
# Read in data
# Metadata
metadata <- read.delim(metadata, sep='\t', header=T, row.names=1)
# Metabolomes
metabolome <- read.delim(metabolome, sep='\t', header=TRUE)
#-------------------------------------------------------------------------------------------------------------------------#
# Format data
# Metadata
metadata$type <- NULL
metadata$cage <- NULL
metadata$mouse <- NULL
metadata$gender <- NULL
metadata$susceptibility <- NULL
# Metabolomes
metabolome$PUBCHEM <- NULL
metabolome$BIOCHEMICAL <- gsub('_', ' ', metabolome$BIOCHEMICAL)
substr(metabolome$BIOCHEMICAL, 1, 1) <- toupper(substr(metabolome$BIOCHEMICAL, 1, 1))
rownames(metabolome) <- metabolome$BIOCHEMICAL
metabolome$BIOCHEMICAL <- NULL
metabolome$KEGG <- NULL
metabolome_annotation <- metabolome[,c(1:2)]
metabolome$SUB_PATHWAY <- NULL
metabolome <- metabolome[order(metabolome$SUPER_PATHWAY),]
metabolome$SUPER_PATHWAY <- NULL
metabolome <- as.data.frame(t(metabolome))
# Format names and add metadata
colnames(metabolome) <- gsub('_', ' ', colnames(metabolome))
substr(colnames(metabolome), 1, 1) <- toupper(substr(colnames(metabolome), 1, 1))
metabolome <- clean_merge(metadata, metabolome)
metabolome <- subset(metabolome, abx != 'germfree')
# Subset antibiotics
noabx_metabolome <- subset(metabolome, abx == 'none')
noabx_metabolome$abx <- NULL
cef_metabolome <- subset(metabolome, abx == 'cefoperazone')
cef_metabolome$abx <- NULL
clinda_metabolome <- subset(metabolome, abx == 'clindamycin')
clinda_metabolome$abx <- NULL
strep_metabolome <- subset(metabolome, abx == 'streptomycin')
strep_metabolome$abx <- NULL
metabolome$abx <- NULL
metabolome$infection <- NULL
# Find medians within antibiotic groups
noabx_metabolome <- aggregate(noabx_metabolome[,2:ncol(noabx_metabolome)], by=list(noabx_metabolome$infection), FUN=median)
rownames(noabx_metabolome) <- 'No_Antibiotics-Mock(median)'
noabx_metabolome$Group.1 <- NULL
cef_metabolome <- aggregate(cef_metabolome[,2:ncol(cef_metabolome)], by=list(cef_metabolome$infection), FUN=median)
rownames(cef_metabolome) <- c('Cefoperzone-Infected(median)','Cefoperzone-Mock(median)')
cef_metabolome$Group.1 <- NULL
clinda_metabolome <- aggregate(clinda_metabolome[,2:ncol(clinda_metabolome)], by=list(clinda_metabolome$infection), FUN=median)
rownames(clinda_metabolome) <- c('Clindamycin-Infected(median)','Clindamycin-Mock(median)')
clinda_metabolome$Group.1 <- NULL
strep_metabolome <- aggregate(strep_metabolome[,2:ncol(strep_metabolome)], by=list(strep_metabolome$infection), FUN=median)
rownames(strep_metabolome) <- c('Streptomycin-Infected(median)','Streptomycin-Mock(median)')
strep_metabolome$Group.1 <- NULL
abx_metabolome <- rbind(strep_metabolome,cef_metabolome,clinda_metabolome)
# Create and write supplementary table
supp_metabolome <- t(rbind(noabx_metabolome, abx_metabolome))
supp_metabolome <- merge(metabolome_annotation, supp_metabolome, by='row.names')
colnames(supp_metabolome)[1] <- 'BIOCHEMICAL'
supp_metabolome$BIOCHEMICAL <- gsub(' ', '_', supp_metabolome$BIOCHEMICAL)
write.table(supp_metabolome, file=supp_table3, sep='\t', row.names=FALSE, quote=FALSE)
rm(supp_metabolome)
rownames(abx_metabolome) <- c('Streptomycin\nInfected','Streptomycin\nMock','Cefoperzone\nInfected',
'Cefoperzone\nMock','Clindamycin\nInfected','Clindamycin\nMock')
# Convert to matrices
metabolome <- as.matrix(metabolome)
abx_metabolome <- as.matrix(abx_metabolome)
noabx_metabolome <- as.matrix(noabx_metabolome)
strep_metabolome <- as.matrix(strep_metabolome)
cef_metabolome <- as.matrix(cef_metabolome)
clinda_metabolome <- as.matrix(clinda_metabolome)
# Remove columns with low variance
metabolome <- rm_lowVar(metabolome)
abx_metabolome <- rm_lowVar(abx_metabolome)
noabx_metabolome <- rm_lowVar(noabx_metabolome)
strep_metabolome <- rm_lowVar(strep_metabolome)
cef_metabolome <- rm_lowVar(cef_metabolome)
clinda_metabolome <- rm_lowVar(clinda_metabolome)
# Scale data and center columns
metabolome <- scale(metabolome)
abx_metabolome <- scale(abx_metabolome)
noabx_metabolome <- scale(noabx_metabolome)
strep_metabolome <- scale(strep_metabolome)
cef_metabolome <- scale(cef_metabolome)
clinda_metabolome <- scale(clinda_metabolome)
# Separate, cluster super pathways, and re-join
rownames(metabolome) <- c('Cefoperazone - Infected 1','Cefoperazone - Infected 2','Cefoperazone - Infected 3',
'Cefoperazone - Infected 4','Cefoperazone - Infected 5','Cefoperazone - Infected 6',
'Cefoperazone - Infected 7','Cefoperazone - Infected 8','Cefoperazone - Infected 9',
'Cefoperazone - Mock 1','Cefoperazone - Mock 2','Cefoperazone - Mock 3',
'Cefoperazone - Mock 4','Cefoperazone - Mock 5','Cefoperazone - Mock 6',
'Cefoperazone - Mock 7','Cefoperazone - Mock 8','Cefoperazone - Mock 9',
'Clindamycin - Infected 1','Clindamycin - Infected 2','Clindamycin - Infected 3',
'Clindamycin - Infected 4','Clindamycin - Infected 5','Clindamycin - Infected 6',
'Clindamycin - Infected 7','Clindamycin - Infected 8','Clindamycin - Infected 9',
'Clindamycin - Mock 1','Clindamycin - Mock 2','Clindamycin - Mock 3',
'Clindamycin - Mock 4','Clindamycin - Mock 5','Clindamycin - Mock 6',
'Clindamycin - Mock 7','Clindamycin - Mock 8','Clindamycin - Mock 9',
'No Antibiotics - Mock 1','No Antibiotics - Mock 2','No Antibiotics - Mock 3',
'No Antibiotics - Mock 4','No Antibiotics - Mock 5','No Antibiotics - Mock 6',
'No Antibiotics - Mock 7','No Antibiotics - Mock 8','No Antibiotics - Mock 9',
'Streptomycin - Infected 1','Streptomycin - Infected 2','Streptomycin - Infected 3',
'Streptomycin - Infected 4','Streptomycin - Infected 5','Streptomycin - Infected 6',
'Streptomycin - Infected 7','Streptomycin - Infected 8','Streptomycin - Infected 9',
'Streptomycin - Mock 1','Streptomycin - Mock 2','Streptomycin - Mock 3',
'Streptomycin - Mock 4','Streptomycin - Mock 5','Streptomycin - Mock 6',
'Streptomycin - Mock 7','Streptomycin - Mock 8','Streptomycin - Mock 9')
metabolome <- metabolome[c('No Antibiotics - Mock 1','No Antibiotics - Mock 2','No Antibiotics - Mock 3',
'No Antibiotics - Mock 4','No Antibiotics - Mock 5','No Antibiotics - Mock 6',
'No Antibiotics - Mock 7','No Antibiotics - Mock 8','No Antibiotics - Mock 9',
'Streptomycin - Infected 1','Streptomycin - Infected 2','Streptomycin - Infected 3',
'Streptomycin - Infected 4','Streptomycin - Infected 5','Streptomycin - Infected 6',
'Streptomycin - Infected 7','Streptomycin - Infected 8','Streptomycin - Infected 9',
'Streptomycin - Mock 1','Streptomycin - Mock 2','Streptomycin - Mock 3',
'Streptomycin - Mock 4','Streptomycin - Mock 5','Streptomycin - Mock 6',
'Streptomycin - Mock 7','Streptomycin - Mock 8','Streptomycin - Mock 9',
'Cefoperazone - Infected 1','Cefoperazone - Infected 2','Cefoperazone - Infected 3',
'Cefoperazone - Infected 4','Cefoperazone - Infected 5','Cefoperazone - Infected 6',
'Cefoperazone - Infected 7','Cefoperazone - Infected 8','Cefoperazone - Infected 9',
'Cefoperazone - Mock 1','Cefoperazone - Mock 2','Cefoperazone - Mock 3',
'Cefoperazone - Mock 4','Cefoperazone - Mock 5','Cefoperazone - Mock 6',
'Cefoperazone - Mock 7','Cefoperazone - Mock 8','Cefoperazone - Mock 9',
'Clindamycin - Infected 1','Clindamycin - Infected 2','Clindamycin - Infected 3',
'Clindamycin - Infected 4','Clindamycin - Infected 5','Clindamycin - Infected 6',
'Clindamycin - Infected 7','Clindamycin - Infected 8','Clindamycin - Infected 9',
'Clindamycin - Mock 1','Clindamycin - Mock 2','Clindamycin - Mock 3',
'Clindamycin - Mock 4','Clindamycin - Mock 5','Clindamycin - Mock 6',
'Clindamycin - Mock 7','Clindamycin - Mock 8','Clindamycin - Mock 9'),]
metabolome <- merge(metabolome_annotation, t(metabolome), by='row.names')
rownames(metabolome) <- metabolome$Row.names
metabolome$Row.names <- NULL
metabolome$SUB_PATHWAY <- NULL
pathways <- table(metabolome$SUPER_PATHWAY)
metabolome_amino <- subset(metabolome, SUPER_PATHWAY == 'Amino_Acid')
metabolome_amino$SUPER_PATHWAY <- NULL
amino <- as.vector(hclust(dist(metabolome_amino))$order)
metabolome_amino <- t(metabolome_amino[amino,])
metabolome_carb <- subset(metabolome, SUPER_PATHWAY == 'Carbohydrate')
metabolome_carb$SUPER_PATHWAY <- NULL
carb <- as.vector(hclust(dist(metabolome_carb))$order)
metabolome_carb <- t(metabolome_carb[carb,])
metabolome_vit <- subset(metabolome, SUPER_PATHWAY == 'Cofactors_and_Vitamins')
metabolome_vit$SUPER_PATHWAY <- NULL
vit <- as.vector(hclust(dist(metabolome_vit))$order)
metabolome_vit <- t(metabolome_vit[vit,])
metabolome_energy <- subset(metabolome, SUPER_PATHWAY == 'Energy')
metabolome_energy$SUPER_PATHWAY <- NULL
energy <- as.vector(hclust(dist(metabolome_energy))$order)
metabolome_energy <- t(metabolome_energy[energy,])
metabolome_lipid <- subset(metabolome, SUPER_PATHWAY == 'Lipid')
metabolome_lipid$SUPER_PATHWAY <- NULL
lipid <- as.vector(hclust(dist(metabolome_lipid))$order)
metabolome_lipid <- t(metabolome_lipid[lipid,])
metabolome_nuc <- subset(metabolome, SUPER_PATHWAY == 'Nucleotide')
metabolome_nuc$SUPER_PATHWAY <- NULL
nuc <- as.vector(hclust(dist(metabolome_nuc))$order)
metabolome_nuc <- t(metabolome_nuc[nuc,])
metabolome_pep <- subset(metabolome, SUPER_PATHWAY == 'Peptide')
metabolome_pep$SUPER_PATHWAY <- NULL
pep <- as.vector(hclust(dist(metabolome_pep))$order)
metabolome_pep <- t(metabolome_pep[pep,])
metabolome_xeno <- subset(metabolome, SUPER_PATHWAY == 'Xenobiotics')
metabolome_xeno$SUPER_PATHWAY <- NULL
xeno <- as.vector(hclust(dist(metabolome_xeno))$order)
metabolome_xeno <- t(metabolome_xeno[xeno,])
metabolome <- as.matrix(cbind(metabolome_amino,metabolome_carb,metabolome_vit,
metabolome_energy,metabolome_lipid,metabolome_nuc,
metabolome_pep,metabolome_xeno))
rm(metabolome_amino,metabolome_carb,metabolome_vit,
metabolome_energy,metabolome_lipid,metabolome_nuc,
metabolome_pep,metabolome_xeno)
abx_metabolome <- merge(metabolome_annotation, t(abx_metabolome), by='row.names')
rownames(abx_metabolome) <- abx_metabolome$Row.names
abx_metabolome$Row.names <- NULL
abx_metabolome$SUB_PATHWAY <- NULL
pathways <- table(abx_metabolome$SUPER_PATHWAY)
abx_metabolome_amino <- subset(abx_metabolome, SUPER_PATHWAY == 'Amino_Acid')
abx_metabolome_amino$SUPER_PATHWAY <- NULL
amino <- as.vector(hclust(dist(abx_metabolome_amino))$order)
abx_metabolome_amino <- t(abx_metabolome_amino[amino,])
abx_metabolome_carb <- subset(abx_metabolome, SUPER_PATHWAY == 'Carbohydrate')
abx_metabolome_carb$SUPER_PATHWAY <- NULL
carb <- as.vector(hclust(dist(abx_metabolome_carb))$order)
abx_metabolome_carb <- t(abx_metabolome_carb[carb,])
abx_metabolome_vit <- subset(abx_metabolome, SUPER_PATHWAY == 'Cofactors_and_Vitamins')
abx_metabolome_vit$SUPER_PATHWAY <- NULL
vit <- as.vector(hclust(dist(abx_metabolome_vit))$order)
abx_metabolome_vit <- t(abx_metabolome_vit[vit,])
abx_metabolome_energy <- subset(abx_metabolome, SUPER_PATHWAY == 'Energy')
abx_metabolome_energy$SUPER_PATHWAY <- NULL
energy <- as.vector(hclust(dist(abx_metabolome_energy))$order)
abx_metabolome_energy <- t(abx_metabolome_energy[energy,])
abx_metabolome_lipid <- subset(abx_metabolome, SUPER_PATHWAY == 'Lipid')
abx_metabolome_lipid$SUPER_PATHWAY <- NULL
lipid <- as.vector(hclust(dist(abx_metabolome_lipid))$order)
abx_metabolome_lipid <- t(abx_metabolome_lipid[lipid,])
abx_metabolome_nuc <- subset(abx_metabolome, SUPER_PATHWAY == 'Nucleotide')
abx_metabolome_nuc$SUPER_PATHWAY <- NULL
nuc <- as.vector(hclust(dist(abx_metabolome_nuc))$order)
abx_metabolome_nuc <- t(abx_metabolome_nuc[nuc,])
abx_metabolome_pep <- subset(abx_metabolome, SUPER_PATHWAY == 'Peptide')
abx_metabolome_pep$SUPER_PATHWAY <- NULL
pep <- as.vector(hclust(dist(abx_metabolome_pep))$order)
abx_metabolome_pep <- t(abx_metabolome_pep[pep,])
abx_metabolome_xeno <- subset(abx_metabolome, SUPER_PATHWAY == 'Xenobiotics')
abx_metabolome_xeno$SUPER_PATHWAY <- NULL
xeno <- as.vector(hclust(dist(abx_metabolome_xeno))$order)
abx_metabolome_xeno <- t(abx_metabolome_xeno[xeno,])
abx_metabolome <- as.matrix(cbind(abx_metabolome_amino,abx_metabolome_carb,abx_metabolome_vit,
abx_metabolome_energy,abx_metabolome_lipid,abx_metabolome_nuc,
abx_metabolome_pep,abx_metabolome_xeno))
rm(abx_metabolome_vit,metabolome_annotation, amino,carb,vit,energy,lipid,nuc,pep,xeno,
abx_metabolome_energy,abx_metabolome_lipid,abx_metabolome_nuc,
abx_metabolome_pep,abx_metabolome_xeno)
#-------------------------------------------------------------------------------------------------------------------------#
# Set plotting up parameters
heat_palette <- viridis(n=200)
# Generate figures
pdf(file=plot_4, width=50, height=30)
heatmap.2( metabolome,
col=heat_palette,
trace='none',
scale='none',
symm=FALSE,
symbreaks=FALSE,
dendrogram='none',
margins=c(10, 20),
cexRow=2.5,
Colv=FALSE,
Rowv=FALSE,
labCol=FALSE,
keysize=1,
density.info='none',
symkey=FALSE,
key.xlab='Scaled Intensity',
key.par=list(cex=1.5))
segments(x0=0.182, y0=0.816, x1=0.182, y1=0.707, lwd=7) # Resistant
text(x=0.15, y=0.76, 'Resistant', cex=3)
segments(x0=0.182, y0=0.698, x1=0.182, y1=0.025, lwd=7) # Susceptible
text(x=0.15, y=0.36, 'Susceptible', cex=3)
segments(x0=0.189, y0=0.02, x1=0.326, y1=0.02, lwd=7) # amino acids
text(x=0.2585, y=0.005, 'Amino Acids', cex=2.2)
segments(x0=0.331, y0=0.02, x1=0.364, y1=0.02, lwd=7) # carbs
text(x=0.348, y=0.005, 'Carbohydrates', cex=2.2)
segments(x0=0.37, y0=0.02, x1=0.409, y1=0.02, lwd=7) # vit
text(x=0.39, y=0.005, 'Vitamins', cex=2.2)
segments(x0=0.413, y0=0.02, x1=0.423, y1=0.02, lwd=7) # Energy
text(x=0.42, y=0.005, 'Energy', cex=2.2)
segments(x0=0.427, y0=0.02, x1=0.75, y1=0.02, lwd=7) # Lipid
text(x=0.59, y=0.005, 'Lipid', cex=2.2)
segments(x0=0.756, y0=0.02, x1=0.809, y1=0.02, lwd=7) # Nucleotide
text(x=0.784, y=0.005, 'Nucleotide', cex=2.2)
segments(x0=0.815, y0=0.02, x1=0.854, y1=0.02, lwd=7) # Peptide
text(x=0.836, y=0.005, 'Peptide', cex=2.2)
segments(x0=0.86, y0=0.02, x1=0.94, y1=0.02, lwd=7) # Xenobiotics
text(x=0.9, y=0.005, 'Xenobiotics ', cex=2.2)
dev.off()
pdf(file=plot_5a, width=50, height=30)
heatmap.2( abx_metabolome,
col=heat_palette,
trace='none',
scale='none',
symm=FALSE,
symbreaks=FALSE,
dendrogram='none',
margins=c(15, 20),
cexRow=3.8,
Rowv=FALSE,
Colv=FALSE,
labCol=FALSE,
keysize=1,
density.info='none',
symkey=FALSE,
key.xlab='Scaled Intensity',
key.par=list(cex=1.5))
segments(x0=0.189, y0=0.04, x1=0.326, y1=0.04, lwd=7) # amino acids
text(x=0.2585, y=0.025, 'Amino Acids', cex=3)
segments(x0=0.331, y0=0.04, x1=0.364, y1=0.04, lwd=7) # carbs
text(x=0.348, y=0.025, 'Carbohydrates', cex=3)
segments(x0=0.37, y0=0.04, x1=0.409, y1=0.04, lwd=7) # vit
text(x=0.39, y=0.005, 'Vitamins', cex=3)
segments(x0=0.413, y0=0.04, x1=0.423, y1=0.04, lwd=7) # Energy
text(x=0.42, y=0.025, 'Energy', cex=3)
segments(x0=0.427, y0=0.04, x1=0.75, y1=0.04, lwd=7) # Lipid
text(x=0.59, y=0.025, 'Lipid', cex=3)
segments(x0=0.756, y0=0.04, x1=0.809, y1=0.04, lwd=7) # Nucleotide
text(x=0.784, y=0.025, 'Nucleotide', cex=3)
segments(x0=0.815, y0=0.04, x1=0.854, y1=0.04, lwd=7) # Peptide
text(x=0.836, y=0.025, 'Peptide', cex=3)
segments(x0=0.86, y0=0.04, x1=0.94, y1=0.04, lwd=7) # Xenobiotics
text(x=0.9, y=0.025, 'Xenobiotics ', cex=3)
text(x=0.15, y=0.82, 'a', cex=6, font=2)
text(x=0.55, y=0.845, 'Susceptible Metabolomes Only', cex=4, font=2)
dev.off()
pdf(file=plot_5b, width=20, height=20)
heatmap.2( abx_metabolome_carb,
col=heat_palette,
trace='none',
scale='none',
symm=FALSE,
symbreaks=FALSE,
dendrogram='none',
margins=c(35, 20),
cexRow=2,
cexCol=2,
Rowv=FALSE,
Colv=FALSE,
keysize=1,
density.info='none',
symkey=FALSE,
key.xlab='Scaled Intensity',
key.par=list(cex=1.5))
text(x=0.15, y=0.82, 'b', cex=4, font=2)
text(x=0.5, y=0.845, 'Carbohydrates', cex=3.5, font=2)
dev.off()
pdf(file=plot_5c, width=40, height=20)
heatmap.2( abx_metabolome_amino,
col=heat_palette,
trace='none',
scale='none',
symm=FALSE,
symbreaks=FALSE,
dendrogram='none',
margins=c(30, 20),
cexRow=2,
cexCol=1.8,
Rowv=FALSE,
Colv=FALSE,
keysize=1,
density.info='none',
symkey=FALSE,
key.xlab='Scaled Intensity',
key.par=list(cex=1.5))
text(x=0.17, y=0.82, 'c', cex=4, font=2)
text(x=0.5, y=0.845, 'Amino Acids', cex=3.5, font=2)
dev.off()
#-------------------------------------------------------------------------------------------------------------------------#
# Clean up
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only=TRUE)}
setwd(starting_dir)
rm(list=ls())
gc()
