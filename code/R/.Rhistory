pch=21, bg='chartreuse2', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
stripchart(at=index+0.35, jitter(cef_infected_otu[,i], amount=1e-5),
pch=21, bg='mediumorchid4', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
if (i != ncol(cef_mock_otu)){
abline(h=index+1, lty=2)
}
segments(median(cef_mock_otu[,i]), index-0.6, median(cef_mock_otu[,i]), index, lwd=2) #adds line for median
segments(median(cef_infected_otu[,i]), index+0.6, median(cef_infected_otu[,i]), index, lwd=2)
if (wilcox.test(cef_mock_otu[,i], cef_infected_otu[,i], exact=FALSE)$p.value <= 0.05){
text(x=log10(cef_size)+0.25, y=index, labels='*', font=2, cex=1.8, xpd=TRUE)
}
index <- index + 2
}
axis(1, at=c(0,(log10(cef_size/1000)),(log10(cef_size/100)),(log10(cef_size/10)),log10(cef_size)), labels=c('0','0.1','1','10','100'))
legend('topright', legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))), 'Mock-infected'),
pch=c(21, 21), pt.bg=c('mediumorchid4','chartreuse2'), bg='white', pt.cex=1.4, cex=0.9)
formatted_names <- lapply(1:nrow(cef_lefse), function(i) bquote(paste(italic(.(cef_lefse$genus[i])), ' ', .(as.vector(cef_lefse$OTU)[i]), sep='')))
axis(2, at=seq(1,index-2,2)+0.4, labels=do.call(expression, formatted_names), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
formatted_p <- lapply(1:nrow(cef_lefse), function(i) bquote(paste(.(as.vector(cef_lefse$phylum)[i]), '; ', italic('p'), ' = ', .(cef_lefse$pValue[i]), sep='')))
axis(2, at=seq(1,index-2,2)-0.4, labels=do.call(expression, formatted_p), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
cef_ticks <- c(log10(cef_size/1000)-0.55,log10(cef_size/1000)-0.35,log10(cef_size/1000)-0.2,log10(cef_size/1000)-0.1,log10(cef_size/1000)-0.05)
axis(side=1, at=cef_ticks+0.02, label=rep('',length(cef_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+0.74, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+1.74, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+2.74, label=rep('',length(minor_ticks)), tck=-0.01)
mtext('c', side=2, line=2, las=2, adj=11, padj=-9, cex=1.3, font=2)
#-----------------#
# Clindamycin plot
plot(1, type='n', ylim=c(0,nrow(clinda_lefse)*2), xlim=c(0,log10(clinda_size)),
ylab='', xlab='Relative Abundance %', xaxt='n', yaxt='n')
title('Clindamycin-pretreated', line=0.5, cex.main=1.3, col.main=clinda_col, font.main=1)
index <- 1
for(i in c(1:ncol(clinda_mock_otu))){
stripchart(at=index-0.25, jitter(clinda_mock_otu[,i], amount=1e-5),
pch=21, bg='chartreuse2', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
stripchart(at=index+0.25, jitter(clinda_infected_otu[,i], amount=1e-5),
pch=21, bg='mediumorchid4', method='jitter', jitter=0.12, cex=1.5, lwd=0.5, add=TRUE)
if (i != ncol(clinda_mock_otu)){
abline(h=index+1, lty=2)
}
segments(median(clinda_mock_otu[,i]), index-0.6, median(clinda_mock_otu[,i]), index, lwd=2) #adds line for median
segments(median(clinda_infected_otu[,i]), index+0.6, median(clinda_infected_otu[,i]), index, lwd=2)
if (wilcox.test(clinda_mock_otu[,i], clinda_infected_otu[,i], exact=FALSE)$p.value <= 0.05){
text(x=log10(clinda_size)+0.25, y=index, labels='*', font=2, cex=1.8, xpd=TRUE)
}
index <- index + 2
}
axis(1, at=c(0,(log10(clinda_size/1000)),(log10(clinda_size/100)),(log10(clinda_size/10)),log10(clinda_size)), labels=c('0','0.1','1','10','100'))
legend('topright', legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))), 'Mock-infected'),
pch=c(21, 21), pt.bg=c('mediumorchid4','chartreuse2'), bg='white', pt.cex=1.4, cex=0.9)
formatted_names <- lapply(1:nrow(clinda_lefse), function(i) bquote(paste(italic(.(clinda_lefse$genus[i])), ' ', .(as.vector(clinda_lefse$OTU)[i]), sep='')))
axis(2, at=seq(1,index-2,2)+0.25, labels=do.call(expression, formatted_names), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
formatted_p <- lapply(1:nrow(clinda_lefse), function(i) bquote(paste(.(as.vector(clinda_lefse$phylum)[i]), '; ', italic('p'), ' = ', .(clinda_lefse$pValue[i]), sep='')))
axis(2, at=seq(1,index-2,2)-0.25, labels=do.call(expression, formatted_p), las=1, line=-0.5, tick=F, cex.axis=1.1, font=3)
axis(side=1, at=short_ticks, label=rep('',length(short_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+0.4, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+1.4, label=rep('',length(minor_ticks)), tck=-0.01)
axis(side=1, at=minor_ticks+2.4, label=rep('',length(minor_ticks)), tck=-0.01)
mtext('d', side=2, line=2, las=2, adj=10, padj=-9, cex=1.3, font=2)
dev.off()
#-------------------------------------------------------------------------------------------------------------------------------------#
#Clean up
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only = TRUE)
}
setwd(starting_dir)
rm(list=ls())
gc()
# Set up environment
rm(list=ls())
gc()
# Load in functions
starting_dir <- getwd()
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Output plot name
plot_file <- 'results/supplement/figures/figure_S2.pdf'
# Input 0.03 OTU shared file
shared_otu_file <- 'data/16S_analysis/all_treatments.0.03.unique_list.conventional.shared'
# Input Metadata
metadata_file <- 'data/metadata.tsv'
#----------------#
# Read in data
# 16S data
shared_otu <- read.delim(shared_otu_file, sep='\t', header=TRUE, row.names=2)
rm(shared_otu_file)
# Metadata
metadata <- read.delim(metadata_file, sep='\t', header=T, row.names=1)
rm(metadata_file)
#-------------------------------------------------------------------------------------------------------------------------#
# Format data
# Metadata
metadata <- metadata[!rownames(metadata) %in% c('CefC5M2'), ]
metadata$type <- NULL
metadata$cage <- NULL
metadata$mouse <- NULL
metadata$gender <- NULL
# 16S data
shared_otu$label <- NULL
shared_otu$numOtus <- NULL
shared_otu <- shared_otu[!rownames(shared_otu) %in% c('CefC5M2'), ]
shared_otu <- shared_otu[,!(names(shared_otu) %in% c('Otu0004','Otu0308'))] # Remove residual C. difficile OTUs
#shared_otu <- shared_otu[!rownames(shared_otu) %in% c('ConvC1M1','ConvC1M2','ConvC1M3','ConvC1M4',
#                                                       'ConvC2M1','ConvC2M2','ConvC2M3','ConvC2M4','ConvC2M5'), ] # Untreated SPF samples
sub_sample <- ceiling(min(rowSums(shared_otu)) * 0.9) # calculate rarefaction level
shared_otu <- rrarefy(shared_otu, sub_sample) # subsample shared file
shared_otu <- filter_table(shared_otu)
rm(sub_sample)
#-------------------------------------------------------------------------------------------------------------------------#
# Calculate axes
# Community structure - all
otu_nmds <- metaMDS(shared_otu, k=2, trymax=100, distance='bray')$points
otu_nmds <- clean_merge(metadata, otu_nmds)
# Subset NMDS axes to color points - all
otu_cefoperazone <- subset(otu_nmds, abx == 'cefoperazone')
otu_cefoperazone_630 <- subset(otu_cefoperazone, infection == '630')
otu_cefoperazone_mock <- subset(otu_cefoperazone, infection == 'mock')
rm(otu_cefoperazone)
otu_clindamycin <- subset(otu_nmds, abx == 'clindamycin')
otu_clindamycin_630 <- subset(otu_clindamycin, infection == '630')
otu_clindamycin_mock <- subset(otu_clindamycin, infection == 'mock')
rm(otu_clindamycin)
otu_streptomycin <- subset(otu_nmds, abx == 'streptomycin')
otu_streptomycin_630 <- subset(otu_streptomycin, infection == '630')
otu_streptomycin_mock <- subset(otu_streptomycin, infection == 'mock')
rm(otu_streptomycin)
otu_noantibiotics <- subset(otu_nmds, abx == 'none')
#----------------#
# Separate plots
# All abx
abx_otu <- shared_otu[!rownames(shared_otu) %in% c('ConvC1M1','ConvC1M2','ConvC1M3','ConvC1M4',
'ConvC2M1','ConvC2M2','ConvC2M3','ConvC2M4','ConvC2M5'), ]
# Individual abx
cef_otu <- shared_otu[rownames(shared_otu) %in% c('CefC1M1','CefC1M2','CefC1M3',
'CefC2M1','CefC2M2','CefC2M3',
'CefC3M1','CefC3M2','CefC3M3',
'CefC4M1','CefC4M2','CefC4M3',
'CefC5M1','CefC5M2','CefC5M3',
'CefC6M1','CefC6M2','CefC6M3'), ]
clinda_otu <- shared_otu[rownames(shared_otu) %in% c('ClindaC1M1','ClindaC1M2','ClindaC1M3',
'ClindaC2M1','ClindaC2M2','ClindaC2M3',
'ClindaC3M1','ClindaC3M2','ClindaC3M3',
'ClindaC4M1','ClindaC4M2','ClindaC4M3',
'ClindaC5M1','ClindaC5M2','ClindaC5M3',
'ClindaC6M1','ClindaC6M2','ClindaC6M3'), ]
strep_otu <- shared_otu[rownames(shared_otu) %in% c('StrepC1M1','StrepC1M2','StrepC1M3',
'StrepC2M1','StrepC2M2','StrepC2M3',
'StrepC3M1','StrepC3M2','StrepC3M3',
'StrepC4M1','StrepC4M2','StrepC4M3',
'StrepC5M1','StrepC5M2','StrepC5M3',
'StrepC6M1','StrepC6M2','StrepC6M3'), ]
# Calculate inv-Simpson diversity
cef_infected_diversity <- diversity(cef_otu[rownames(cef_otu) %in% c('CefC1M1','CefC1M2','CefC1M3',
'CefC2M1','CefC2M2','CefC2M3',
'CefC3M1','CefC3M2','CefC3M3'), ], 'invsimpson')
cef_mock_diversity <- diversity(cef_otu[rownames(cef_otu) %in% c('CefC4M1','CefC4M2','CefC4M3',
'CefC5M1','CefC5M2','CefC5M3',
'CefC6M1','CefC6M2','CefC6M3'), ], 'invsimpson')
clinda_infected_diversity <- diversity(clinda_otu[rownames(clinda_otu) %in% c('ClindaC1M1','ClindaC1M2','ClindaC1M3',
'ClindaC2M1','ClindaC2M2','ClindaC2M3',
'ClindaC3M1','ClindaC3M2','ClindaC3M3'), ], 'invsimpson')
clinda_mock_diversity <- diversity(clinda_otu[rownames(clinda_otu) %in% c('ClindaC4M1','ClindaC4M2','ClindaC4M3',
'ClindaC5M1','ClindaC5M2','ClindaC5M3',
'ClindaC6M1','ClindaC6M2','ClindaC6M3'), ], 'invsimpson')
strep_infected_diversity <- diversity(strep_otu[rownames(strep_otu) %in% c('StrepC1M1','StrepC1M2','StrepC1M3',
'StrepC2M1','StrepC2M2','StrepC2M3',
'StrepC3M1','StrepC3M2','StrepC3M3'), ], 'invsimpson')
strep_mock_diversity <- diversity(strep_otu[rownames(strep_otu) %in% c('StrepC4M1','StrepC4M2','StrepC4M3',
'StrepC5M1','StrepC5M2','StrepC5M3',
'StrepC6M1','StrepC6M2','StrepC6M3'), ], 'invsimpson')
noabx_diversity <- diversity(shared_otu[rownames(shared_otu) %in% c('ConvC1M1','ConvC1M2','ConvC1M3','ConvC1M4',
'ConvC2M1','ConvC2M2','ConvC2M3','ConvC2M4','ConvC2M5'), ], 'invsimpson')
# Test differences in diversity
# Untreated vs abx
p.adjust(c(wilcox.test(noabx_diversity, cef_infected_diversity, exact=F)$p.value,
wilcox.test(noabx_diversity, cef_mock_diversity, exact=F)$p.value,
wilcox.test(noabx_diversity, clinda_infected_diversity, exact=F)$p.value,
wilcox.test(noabx_diversity, clinda_mock_diversity, exact=F)$p.value,
wilcox.test(noabx_diversity, strep_infected_diversity, exact=F)$p.value,
wilcox.test(noabx_diversity, strep_mock_diversity, exact=F)$p.value), method='BH')
# Strep
wilcox.test(strep_infected_diversity, strep_mock_diversity, exact=F)$p.value
# Cef
wilcox.test(cef_infected_diversity, cef_mock_diversity, exact=F)$p.value
# Clinda
wilcox.test(clinda_infected_diversity, clinda_mock_diversity, exact=F)$p.value
# Calculate axes and merge with metadata
abx_otu_nmds <- metaMDS(abx_otu, k=2, trymax=100)$points
abx_otu_nmds <- clean_merge(metadata, abx_otu_nmds)
cef_otu_nmds <- metaMDS(cef_otu, k=2, trymax=100)$points
cef_otu_nmds <- clean_merge(metadata, cef_otu_nmds)
clinda_otu_nmds <- metaMDS(clinda_otu, k=2, trymax=100)$points
clinda_otu_nmds <- clean_merge(metadata, clinda_otu_nmds)
strep_otu_nmds <- metaMDS(strep_otu, k=2, trymax=100)$points
strep_otu_nmds <- clean_merge(metadata, strep_otu_nmds)
rm(metadata)
# Calculate significant differences
otu_p <- as.character(anosim(shared_otu, otu_nmds$susceptibility, permutations=999, distance='bray')$signif)
otu_r <- as.character(round(anosim(shared_otu, otu_nmds$susceptibility, permutations=999, distance='bray')$statistic, 3))
abx_otu_p <- as.character(anosim(abx_otu, abx_otu_nmds$abx, permutations=999, distance='bray')$signif)
abx_otu_r <- as.character(round(anosim(abx_otu, abx_otu_nmds$abx, permutations=999, distance='bray')$statistic, 3))
cef_otu_p <- as.character(anosim(cef_otu, cef_otu_nmds$infection, permutations=999, distance='bray')$signif)
cef_otu_r <- as.character(round(anosim(cef_otu, cef_otu_nmds$infection, permutations=999, distance='bray')$statistic, 3))
clinda_otu_p <- as.character(anosim(clinda_otu, clinda_otu_nmds$infection, permutations=999, distance='bray')$signif)
clinda_otu_r <- as.character(round(anosim(clinda_otu, clinda_otu_nmds$infection, permutations=999, distance='bray')$statistic, 3))
strep_otu_p <- as.character(anosim(strep_otu, strep_otu_nmds$infection, permutations=999, distance='bray')$signif)
strep_otu_r <- as.character(round(anosim(strep_otu, strep_otu_nmds$infection, permutations=999, distance='bray')$statistic, 3))
rm(cef_otu, clinda_otu, strep_otu)
# Move points for easier viewing
strep_otu_nmds$MDS2 <- strep_otu_nmds$MDS2 + 0.2
# Subset to points for plot
otu_abx_cef <- subset(abx_otu_nmds, abx == 'cefoperazone')
otu_abx_cef_630 <- subset(otu_abx_cef, infection == '630')
otu_abx_cef_mock <- subset(otu_abx_cef, infection == 'mock')
rm(otu_abx_cef)
otu_abx_clinda <- subset(abx_otu_nmds, abx == 'clindamycin')
otu_abx_clinda_630 <- subset(otu_abx_clinda, infection == '630')
otu_abx_clinda_mock <- subset(otu_abx_clinda, infection == 'mock')
rm(otu_abx_clinda)
otu_abx_strep <- subset(abx_otu_nmds, abx == 'streptomycin')
otu_abx_strep_630 <- subset(otu_abx_strep, infection == '630')
otu_abx_strep_mock <- subset(otu_abx_strep, infection == 'mock')
rm(otu_abx_strep)
cef_otu_nmds_630 <- subset(cef_otu_nmds, infection == '630')
cef_otu_nmds_mock <- subset(cef_otu_nmds, infection == 'mock')
clinda_otu_nmds_630 <- subset(clinda_otu_nmds, infection == '630')
clinda_otu_nmds_mock <- subset(clinda_otu_nmds, infection == 'mock')
strep_otu_nmds_630 <- subset(strep_otu_nmds, infection == '630')
strep_otu_nmds_mock <- subset(strep_otu_nmds, infection == 'mock')
# Calculate centroids
cef_otu_centoids <- aggregate(cbind(cef_otu_nmds$MDS1,cef_otu_nmds$MDS2)~cef_otu_nmds$infection, data=cef_otu_nmds, mean)
clinda_otu_centoids <- aggregate(cbind(clinda_otu_nmds$MDS1,clinda_otu_nmds$MDS2)~clinda_otu_nmds$infection, data=clinda_otu_nmds, mean)
strep_otu_centoids <- aggregate(cbind(strep_otu_nmds$MDS1,strep_otu_nmds$MDS2)~strep_otu_nmds$infection, data=strep_otu_nmds, mean)
#-------------------------------------------------------------------------------------------------------------------------#
# Plot the figure
pdf(file=plot_file, width=12, height=12)
layout(matrix(c(1,1,1,
2,3,4,
5,6,7),
nrow=3, ncol=3, byrow=TRUE))
#-------------------#
# Diversity
par(mar=c(3,4,1,1), mgp=c(2.6,1,0), las=1, yaxs='i', xaxs='r')
# No abx
stripchart(at=0.5, noabx_diversity, xlim=c(0,10), ylim=c(0,20), vertical=TRUE, cex.axis=1.4, cex.lab=1.5,
pch=21, bg=noabx_col, method='jitter', jitter=0.15, cex=2.5, lwd=1.2, ylab='Inv. Simpson Diversity')
segments(x0=0.2, y0=median(noabx_diversity), x1=0.8, y1=median(noabx_diversity), lwd=2.5)
#Strep
stripchart(at=2.5, strep_infected_diversity, vertical=TRUE,
pch=21, bg=strep_col, method='jitter', jitter=0.15, cex=2.5, lwd=1.2, add=TRUE)
segments(x0=2.2, y0=median(strep_infected_diversity), x1=2.8, y1=median(strep_infected_diversity), lwd=2.5)
stripchart(at=3.5, strep_mock_diversity, vertical=TRUE,
pch=21, bg=strep_col, method='jitter', jitter=0.15, cex=2.5, lwd=1.2, add=TRUE)
segments(x0=3.2, y0=median(strep_mock_diversity), x1=3.8, y1=median(strep_mock_diversity), lwd=2.5)
# Cef
stripchart(at=5.5, cef_infected_diversity, vertical=TRUE,
pch=21, bg=cef_col, method='jitter', jitter=0.15, cex=2.5, lwd=1.2, add=TRUE)
segments(x0=5.2, y0=median(cef_infected_diversity), x1=5.8, y1=median(cef_infected_diversity), lwd=2.5)
stripchart(at=6.5, cef_mock_diversity, vertical=TRUE,
pch=21, bg=cef_col, method='jitter', jitter=0.15, cex=2.5, lwd=1.2, add=TRUE)
segments(x0=6.2, y0=median(cef_mock_diversity), x1=6.8, y1=median(cef_mock_diversity), lwd=2.5)
# Clinda
stripchart(at=8.5, clinda_infected_diversity, vertical=TRUE,
pch=21, bg=clinda_col, method='jitter', jitter=0.15, cex=2.5, lwd=1.2, add=TRUE)
segments(x0=8.2, y0=median(clinda_infected_diversity), x1=8.8, y1=median(clinda_infected_diversity), lwd=2.5)
stripchart(at=9.5, clinda_mock_diversity, vertical=TRUE,
pch=21, bg=clinda_col, method='jitter', jitter=0.15, cex=2.5, lwd=1.2, add=TRUE)
segments(x0=9.2, y0=median(clinda_mock_diversity), x1=9.8, y1=median(clinda_mock_diversity), lwd=2.5)
mtext('CDI:', side=1, at=-0.5, padj=1, cex=1.1)
mtext(c('-','+','-','+','-','+','-'), side=1,
at=c(0.5, 2.5,3.5, 5.5,6.5, 8.5,9.5), padj=1, cex=1.3)
abline(v=c(1.5,4.5,7.5), lty=5)
mtext('a', side=2, line=2, las=2, adj=2, padj=-10, cex=1.4, font=2)
text(x=c(0.5, 2.5,3.5, 5.5,6.5, 8.5,9.5), y=19.5, labels='*', col=noabx_col, cex=2.5, font=2) # Significant difference fromm untreated
segments(x0=c(5.5,8.5), y0=5, x1=c(6.5,9.5), y1=5, lwd=2.5)
text(x=c(6,9), y=6, labels='*', cex=2.5, font=2) # Significant difference within groups
#-------------------#
# All groups - NMDS
par(mar=c(4,4,1,1), las=1, mgp=c(2.5,0.75,0), xaxs='i', yaxs='i')
plot(x=otu_nmds$MDS1, y=otu_nmds$MDS2, xlim=c(-1.5,2), ylim=c(-1.5,1.5),
xlab='NMDS axis 1', ylab='NMDS axis 2', xaxt='n', yaxt='n', pch=19, cex=0.2)
axis(side=1, at=seq(-1.5,2.0,0.5), labels=seq(-1.5,2.0,0.5))
axis(side=2, at=seq(-2.0,1.5,0.5), labels=seq(-2.0,1.5,0.5))
mtext('b', side=2, line=2, las=2, adj=1.4, padj=-9, cex=1.4, font=2)
legend('topleft', legend='All groups', pch=1, cex=1.4, pt.cex=0, bty='n')
points(x=otu_cefoperazone_630$MDS1, y=otu_cefoperazone_630$MDS2, bg=cef_col, pch=21, cex=2, lwd=1.2)
points(x=otu_clindamycin_630$MDS1, y=otu_clindamycin_630$MDS2, bg=clinda_col, pch=21, cex=2, lwd=1.2)
points(x=otu_streptomycin_630$MDS1, y=otu_streptomycin_630$MDS2, bg=strep_col, pch=21, cex=2, lwd=1.2)
points(x=otu_cefoperazone_mock$MDS1, y=otu_cefoperazone_mock$MDS2, bg=cef_col, pch=24, cex=1.8, lwd=1.2)
points(x=otu_clindamycin_mock$MDS1, y=otu_clindamycin_mock$MDS2, bg=clinda_col, pch=24, cex=1.8, lwd=1.2)
points(x=otu_streptomycin_mock$MDS1, y=otu_streptomycin_mock$MDS2, bg=strep_col, pch=24, cex=1.8, lwd=1.2)
points(x=otu_noantibiotics$MDS1, y=otu_noantibiotics$MDS2, bg=noabx_col, pch=24, cex=1.8, lwd=1.2)
legend('bottomright', legend=c('Resistant vs Susceptible:',
as.expression(bquote(paste(italic('R'),' = ',.(otu_r)))),
as.expression(bquote(paste(italic('p'),' = ',.(otu_p))))), pch=1, cex=1.3, pt.cex=0, bty='n')
#-------------------#
# Abx only
plot(x=abx_otu_nmds$MDS1-0.25, y=abx_otu_nmds$MDS2, xlim=c(-1.3,1.3), ylim=c(-1.8,1.8),
xlab='NMDS axis 1', ylab='NMDS axis 2', pch=19, cex=0.2)
mtext('c', side=2, line=2, las=2, adj=1.4, padj=-9, cex=1.4, font=2)
legend('topleft', legend='Antibiotic pretreatments only', pch=1, cex=1.4, pt.cex=0, bty='n')
points(x=otu_abx_cef_630$MDS1-0.25, y=otu_abx_cef_630$MDS2, bg=cef_col, pch=21, cex=2, lwd=1.2)
points(x=otu_abx_cef_mock$MDS1-0.25, y=otu_abx_cef_mock$MDS2, bg=cef_col, pch=24, cex=2, lwd=1.2)
points(x=otu_abx_clinda_630$MDS1-0.25, y=otu_abx_clinda_630$MDS2, bg=clinda_col, pch=21, cex=2, lwd=1.2)
points(x=otu_abx_clinda_mock$MDS1-0.25, y=otu_abx_clinda_mock$MDS2, bg=clinda_col, pch=24, cex=2, lwd=1.2)
points(x=otu_abx_strep_630$MDS1-0.25, y=otu_abx_strep_630$MDS2, bg=strep_col, pch=21, cex=2, lwd=1.2)
points(x=otu_abx_strep_mock$MDS1-0.25, y=otu_abx_strep_mock$MDS2, bg=strep_col, pch=24, cex=2, lwd=1.2)
legend('bottomright', legend=c('Strep vs Cef vs Clinda:',
as.expression(bquote(paste(italic('R'),' = ',.(abx_otu_r)))),
as.expression(bquote(paste(italic('p'),' = ',.(abx_otu_p))))), pch=1, cex=1.3, pt.cex=0, bty='n')
#-------------------#
# Streptomycin
plot(x=strep_otu_nmds$MDS1, y=strep_otu_nmds$MDS2, xlim=c(-1.3,1.3), ylim=c(-1.8,1.8),
xlab='NMDS axis 1', ylab='NMDS axis 2', pch=19, cex=0.2)
mtext('d', side=2, line=2, las=2, adj=1.4, padj=-9, cex=1.4, font=2)
legend('topleft', legend='Streptomycin-pretreated', pch=1, cex=1.4, pt.cex=0, bty='n')
segments(x0=strep_otu_nmds_630$MDS1, y0=strep_otu_nmds_630$MDS2, x1=strep_otu_centoids[1,2], y1=strep_otu_centoids[1,3], col='gray30')
segments(x0=strep_otu_nmds_mock$MDS1, y0=strep_otu_nmds_mock$MDS2, x1=strep_otu_centoids[2,2], y1=strep_otu_centoids[2,3], col='gray30')
points(x=strep_otu_nmds_630$MDS1, y=strep_otu_nmds_630$MDS2, bg=strep_col, pch=21, cex=2, lwd=1.2)
points(x=strep_otu_nmds_mock$MDS1, y=strep_otu_nmds_mock$MDS2, bg=strep_col, pch=24, cex=2, lwd=1.2)
legend('bottomright', legend=c('Mock vs Infected:',
as.expression(bquote(paste(italic('R'),' = ',.(strep_otu_r)))),
as.expression(bquote(paste(italic('p'),' = ',.(strep_otu_p))))), pch=1, cex=1.3, pt.cex=0, bty='n')
#-------------------#
# Cefoperazone
plot(x=cef_otu_nmds$MDS1, y=cef_otu_nmds$MDS2, xlim=c(-1.2,1.2), ylim=c(-0.8,0.8),
xlab='NMDS axis 1', ylab='NMDS axis 2', pch=19, cex=0.2)
mtext('e', side=2, line=2, las=2, adj=1.4, padj=-9, cex=1.4, font=2)
legend('topleft', legend='Cefoperazone-pretreated', pch=1, cex=1.4, pt.cex=0, bty='n')
segments(x0=cef_otu_nmds_630$MDS1, y0=cef_otu_nmds_630$MDS2, x1=cef_otu_centoids[1,2], y1=cef_otu_centoids[1,3], col='gray30')
segments(x0=cef_otu_nmds_mock$MDS1, y0=cef_otu_nmds_mock$MDS2, x1=cef_otu_centoids[2,2], y1=cef_otu_centoids[2,3], col='gray30')
points(x=cef_otu_nmds_630$MDS1, y=cef_otu_nmds_630$MDS2, bg=cef_col, pch=21, cex=2, lwd=1.2)
points(x=cef_otu_nmds_mock$MDS1, y=cef_otu_nmds_mock$MDS2, bg=cef_col, pch=24, cex=2, lwd=1.2)
legend('bottomright', legend=c('Mock vs Infected:',
as.expression(bquote(paste(italic('R'),' = ',.(cef_otu_r)))),
as.expression(bquote(paste(italic('p'),' = ',.(cef_otu_p))))), pch=1, cex=1.3, pt.cex=0, bty='n')
#-------------------#
# Clindamycin
plot(x=clinda_otu_nmds$MDS1, y=clinda_otu_nmds$MDS2, xlim=c(-1.1,1.1), ylim=c(-1.2,1.2),
xlab='NMDS axis 1', ylab='NMDS axis 2', pch=19, cex=0.2)
mtext('f', side=2, line=2, las=2, adj=1.4, padj=-9, cex=1.4, font=2)
legend('topleft', legend='Clindamycin-pretreated', pch=1, cex=1.4, pt.cex=0, bty='n')
segments(x0=clinda_otu_nmds_630$MDS1, y0=clinda_otu_nmds_630$MDS2, x1=clinda_otu_centoids[1,2], y1=clinda_otu_centoids[1,3], col='gray30')
segments(x0=clinda_otu_nmds_mock$MDS1, y0=clinda_otu_nmds_mock$MDS2, x1=clinda_otu_centoids[2,2], y1=clinda_otu_centoids[2,3], col='gray30')
points(x=clinda_otu_nmds_630$MDS1, y=clinda_otu_nmds_630$MDS2, bg=clinda_col, pch=21, cex=2, lwd=1.2)
points(x=clinda_otu_nmds_mock$MDS1, y=clinda_otu_nmds_mock$MDS2, bg=clinda_col, pch=24, cex=2, lwd=1.2)
legend('bottomright', legend=c('Mock vs Infected:',
as.expression(bquote(paste(italic('R'),' = ',.(clinda_otu_r)))),
as.expression(bquote(paste(italic('p'),' = ',.(clinda_otu_p))))), pch=1, cex=1.3, pt.cex=0, bty='n')
#-------------------#
# Legends
par(mar=c(1,1,1,1))
plot(0, type='n', axes=FALSE, xlab='', ylab='', xlim=c(-5,5), ylim=c(-5,5))
legend(x=-3, y=3, legend=c('No Antibiotics','Streptomycin-pretreated','Cefoperzone-pretreated','Clindamycin-pretreated'),
pt.bg=c(noabx_col,strep_col,cef_col,clinda_col), pch=22, cex=1.5, pt.cex=2.7)
legend(x=-2.5, y=0, legend=c(as.expression(bquote(paste(italic('C. difficile'),'-infected'))),'Mock-infected'),
col='black', pch=c(16,17), cex=1.5, pt.cex=c(2.5,2.2))
dev.off()
#-------------------------------------------------------------------------------------------------------------------------#
# Clean up
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only = TRUE)
}
setwd(starting_dir)
rm(list=ls())
gc()
# Start with clear environment
rm(list=ls())
gc()
# Load in functions
starting_dir <- getwd()
source('~/Desktop/Repositories/Jenior_Metatranscriptomics_2016/code/R/functions.R')
# Define input files
wetlab_file <- 'data/wetlab_assays.tsv'
metadata_file <- 'data/metadata.tsv'
# Define output files
plot_file <- 'results/figures/figure_1.pdf'
#-------------------------------------------------------------------------------------------------------------------------------------#
# Load in data
metadata <- read.delim(metadata_file, sep='\t', header=T, row.names=1)
metadata <- metadata[!rownames(metadata) %in% c('CefC5M2'), ] # Remove contaminated sample
metadata <- subset(metadata, type == 'conventional') # remove germfree
metadata$type <- NULL
metadata$cage <- NULL
metadata$mouse <- NULL
metadata$gender <- NULL
wetlab <- read.delim(wetlab_file, sep='\t', header=T, row.names=1)
rm(metadata_file, wetlab_file)
#-------------------------------------------------------------------------------------------------------------------------------------#
# Format wetlab assay data
wetlab <- subset(wetlab, infection == '630') # Remove uninfected controls
wetlab <- subset(wetlab, treatment != 'germfree') # Remove germfree
wetlab$infection <- NULL
wetlab$cfu_vegetative <- as.numeric(wetlab$cfu_vegetative)
wetlab$cfu_vegetative[wetlab$cfu_vegetative == 0] <- 100
wetlab$cfu_vegetative <- log10(wetlab$cfu_vegetative)
wetlab$cfu_spore <- as.numeric(wetlab$cfu_spore)
wetlab$cfu_spore[wetlab$cfu_spore == 0] <- 100
wetlab$cfu_spore <- log10(wetlab$cfu_spore)
wetlab$treatment <- factor(wetlab$treatment, levels=c('conventional', 'streptomycin', 'cefoperazone', 'clindamycin'))
wetlab$cfu_vegetative[wetlab$cfu_vegetative <= 2.0] <- 1.7 # Undetectable points below LOD
wetlab$cfu_spore[wetlab$cfu_spore <= 2.0] <- 1.7 # Undetectable points below LOD
wetlab$toxin_titer[wetlab$toxin_titer <= 2.0] <- 1.94 # Undetectable points below LOD
#----------------------------------------------------------------------------------------------------------------------#
# Set up multi-panel figure
pdf(file=plot_file, width=10, height=3)
layout(matrix(c(1,2,2),
nrow=1, ncol=3, byrow = TRUE))
minor_ticks <- c(0.18,0.34,0.48,0.6,0.7,0.78,0.84,0.9,0.94,0.98)
short_ticks <- c(log10(strep_size/1000)-0.33,log10(strep_size/1000)-0.2,log10(strep_size/1000)-0.1,log10(strep_size/1000)-0.05)
#----------------------------------------------------------------------------------------------------------------------#
# Create an empty plot
par(mar=c(0,0,0,0))
plot(0, type='n', axes=F, xlab='', ylab='', xlim=c(-4.75,4), ylim=c(-2,5))
# Abx in drinking water timeline
rect(xleft=-4, ybottom=3.8, xright=0, ytop=4.2, col='gray70', border='black')
Arrows(x0=-4, y0=4, x1=3.5, y1=4, lwd=4, arr.type='triangle', arr.length=0.6, arr.width=0.2)
segments(x0=c(-4,0,2,2.75), y0=c(4.4,4.4,4.4,4.3), x1=c(-4,0,2,2.75), y1=c(3.6,3.6,3.6,3.7),
lwd=4, col=c('black','black','black','black'))
segments(x0=c(-4,-3,-2,-1,1), y0=c(4.25,4.25,4.25,4.25,4.25), x1=c(-4,-3,-2,-1,1), y1=c(3.75,3.75,3.75,3.75,3.75), lwd=2)
points(x=c(2,2.75), y=c(4.8,4.8), pch=25, bg=c('white','black'), col='black', cex=2.5)
text(x=c(-4,0,2), y=c(3.1,3.1,3.1), c('Day -7', 'Day -2', 'Day 0'), cex=1.1)
text(x=-4.4, y=4, '1', font=2, cex=1.5)
# IP injection abx timeline
Arrows(x0=-4, y0=1, x1=-1.5, y1=1, lwd=4, arr.type='triangle', arr.length=0.6, arr.width=0.2)
segments(x0=c(-4,-3,-2.25), y0=c(0.6,0.6,0.7), x1=c(-4,-3,-2.25), y1=c(1.4,1.4,1.3), lwd=4, col=c('black','black','black'))
points(x=c(-4,-3,-2.25), y=c(1.8,1.8,1.8), pch=c(25,25,25), bg=c('gray70','white','black'), col='black', cex=2.5)
text(x=c(-4,-3), y=c(0.2,0.2), c('Day -1', 'Day 0'), cex=1.1)
text(-4.4, 1, '2', font=2, cex=1.5)
# Legend
legend(x=-0.6, y=2, legend=expression('Antibiotic in Drinking Water', 'Antibiotic IP Injection',paste(italic('C. difficile'), ' Spore Gavage'), 'Necropsy (18 hpi)'),
pt.bg=c('gray70','gray70','white','black'), pch=c(22,25,25,25), cex=1.1, pt.cex=c(3,2,2,2), bty='n')
# Route of administration
text(x=c(-2.5, 2.3), y=c(-0.6,-0.6), c('In Drinking Water:', 'IP Injected:'), cex=1.2, font=2)
text(x=-2.5, y=c(-1,-1.4), c('Streptomycin (5.0 mg/ml)','Cefoperazone (0.5 mg/ml)'), cex=1.2, col=c(cef_col, strep_col))
text(x=2.3, y=-1, 'Clindamycin (10 mg/kg)', cex=1.2, col=clinda_col)
# Plot label
text(-4.7, 4.88, 'a', cex=1.9, font=2)
#-------------------------------------------------------------------#
# CFU and toxin data
# Vegetative cells
par(mar=c(3,4,1,4), mgp=c(2.5, 0.75, 0))
stripchart(cfu_vegetative~treatment, data=wetlab, col='black', bg='chocolate2', xlim=c(0,22), ylim=c(0,9), pch=21,
vertical=TRUE, at=c(0.5, 6.5, 12.5, 18.5), xaxt='n', yaxt='n', ylab='CFU/g Cecal Content', cex.lab=1.2,
cex=1.7, method='jitter', jitter=0.2)
abline(h=2, lwd=1.5, col='gray30', lty=5) # LOD
abline(v=c(5,11,17), lwd=1.5) # dividers
axis(side=2, at=seq(0,9,1), labels=c(0, parse(text=paste(rep(10,9), '^', seq(1,9,1), sep=''))), las=1)
mtext(c('No Antibiotics','Streptomycin','Cefoperazone','Clindamycin'), col=c('black',strep_col, cef_col, clinda_col),
at=c(2,8,14,20), side=1, cex=1, padj=0.75, font=2)
# Median lines
segments(x0=c(0.5, 6.5, 12.5, 18.5)-0.6, y0=c(
as.numeric(median(wetlab[wetlab$treatment == 'conventional', 2])),
as.numeric(median(wetlab[wetlab$treatment == 'streptomycin', 2])),
as.numeric(median(wetlab[wetlab$treatment == 'cefoperazone', 2])),
as.numeric(median(wetlab[wetlab$treatment == 'clindamycin', 2]))),
x1=c(0.5, 6.5, 12.5, 18.5)+0.6, y1=c(
as.numeric(median(wetlab[wetlab$treatment == 'conventional', 2])),
as.numeric(median(wetlab[wetlab$treatment == 'streptomycin', 2])),
as.numeric(median(wetlab[wetlab$treatment == 'cefoperazone', 2])),
as.numeric(median(wetlab[wetlab$treatment == 'clindamycin', 2]))), lwd=3)
# Spores
stripchart(cfu_spore~treatment, data=wetlab, col='black', bg='chartreuse3', xlim=c(0,22), ylim=c(0,9), pch=21,
vertical=TRUE, at=c(2, 8, 14, 20), xaxt='n', yaxt='n', ylab='', cex=1.7, method='jitter', jitter=0.2, add=TRUE)
# Median lines
segments(x0=c(2, 8, 14, 20)-0.6, y0=c(
as.numeric(median(wetlab[wetlab$treatment == 'conventional', 3])),
as.numeric(median(wetlab[wetlab$treatment == 'streptomycin', 3])),
as.numeric(median(wetlab[wetlab$treatment == 'cefoperazone', 3])),
as.numeric(median(wetlab[wetlab$treatment == 'clindamycin', 3]))),
x1=c(2, 8, 14, 20)+0.6, y1=c(
as.numeric(median(wetlab[wetlab$treatment == 'conventional', 3])),
as.numeric(median(wetlab[wetlab$treatment == 'streptomycin', 3])),
as.numeric(median(wetlab[wetlab$treatment == 'cefoperazone', 3])),
as.numeric(median(wetlab[wetlab$treatment == 'clindamycin', 3]))), lwd=3)
# Toxin
par(new=TRUE, xpd=TRUE)
stripchart(toxin_titer~treatment, data=wetlab, col='black', bg='deeppink3', xlim=c(0,22), ylim=c(1.6,3.4), pch=23,
vertical=TRUE, at=c(3.5, 9.5, 15.5, 21.5), xaxt='n', yaxt='n', ylab='', cex=1.7, method='jitter', jitter=0.2)
# Median lines
segments(x0=c(3.5, 9.5, 15.5, 21.5)-0.6, y0=c(
as.numeric(median(wetlab[wetlab$treatment == 'conventional', 4])),
as.numeric(median(wetlab[wetlab$treatment == 'streptomycin', 4])),
as.numeric(median(wetlab[wetlab$treatment == 'cefoperazone', 4])),
as.numeric(median(wetlab[wetlab$treatment == 'clindamycin', 4]))),
x1=c(3.5, 9.5, 15.5, 21.5)+0.6, y1=c(
as.numeric(median(wetlab[wetlab$treatment == 'conventional', 4])),
as.numeric(median(wetlab[wetlab$treatment == 'streptomycin', 4])),
as.numeric(median(wetlab[wetlab$treatment == 'cefoperazone', 4])),
as.numeric(median(wetlab[wetlab$treatment == 'clindamycin', 4]))), lwd=3)
axis(side=4, at=seq(1.6,3.4,0.2), las=1,
labels=c('1.6','1.8','2.0','2.2','2.4','2.6','2.8','3.0','3.2','3.4'))
mtext(expression(paste('Toxin Titer/g Cecal Content (',log[10],')')), side=4, line=3, cex=0.8)
legend('topleft', legend=c('Vegetative cells (CFU)','Spores (CFU)'), ncol=1, bty='n',
pch=21, col='black', pt.bg=c('chocolate2','chartreuse3'), pt.cex=1.9)
legend('topright', legend='Toxin titer', bty='n',
pch=23, col='black', pt.bg='deeppink3', pt.cex=1.9)
box()
# Add significance
text(x=c(6.5,12.5,18.5,8,14,20,15.5,21.5), y=c(3.4,3.4,3.4,3,3,3,3.2,2.5), labels=rep('*',8), col=noabx_col, font=2, cex=2.2)
mtext('b', side=2, line=2, las=2, adj=2.5, padj=-8, cex=1.2, font=2)
dev.off()
#-------------------------------------------------------------------------------------------------------------------------------------#
#Clean up
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only = TRUE)
}
setwd(starting_dir)
rm(list=ls())
gc()
